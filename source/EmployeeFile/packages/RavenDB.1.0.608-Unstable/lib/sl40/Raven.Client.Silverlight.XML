<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Raven.Client.Silverlight</name>
    </assembly>
    <members>
        <member name="T:Raven.Abstractions.Data.IJsonDocumentMetadata">
            <summary>
            Interface that is used purely internally
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IJsonDocumentMetadata.Metadata">
            <summary>
            	Gets or sets the metadata for the document
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IJsonDocumentMetadata.Key">
            <summary>
            	Gets or sets the key for the document
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IJsonDocumentMetadata.NonAuthoritativeInformation">
            <summary>
            	Gets or sets a value indicating whether this document is non authoritative (modified by uncommitted transaction).
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IJsonDocumentMetadata.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IJsonDocumentMetadata.LastModified">
            <summary>
            	Gets or sets the last modified date for the document
            </summary>
            <value>The last modified.</value>
        </member>
        <member name="T:Raven.Abstractions.Data.JsonDocumentMetadata">
            <summary>
            A document representation:
            * Etag
            * Metadata
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocumentMetadata.Metadata">
            <summary>
            	Gets or sets the metadata for the document
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocumentMetadata.Key">
            <summary>
            	Gets or sets the key for the document
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocumentMetadata.NonAuthoritativeInformation">
            <summary>
            	Gets or sets a value indicating whether this document is non authoritative (modified by uncommitted transaction).
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocumentMetadata.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocumentMetadata.LastModified">
            <summary>
            	Gets or sets the last modified date for the document
            </summary>
            <value>The last modified.</value>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonDateTimeOffsetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param><param name="value">The value.</param><param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonDateTimeOffsetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param><param name="objectType">Type of the object.</param><param name="existingValue">The existing value of object being read.</param><param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonDateTimeOffsetConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJToken})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Raven.Json.Linq.RavenJToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Json.Linq.RavenJToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Raven.Json.Linq.RavenJToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Json.Linq.RavenJToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJToken})">
            <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Json.Linq.RavenJToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection.</returns>
        </member>
        <member name="M:Raven.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJToken},System.String)">
            <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Json.Linq.RavenJToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Json.Linq.RavenJToken"/> that contains the values of every node in the source collection with the given key.</returns>
        </member>
        <member name="M:Raven.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJToken})">
            <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Json.Linq.RavenJToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Json.Linq.RavenJToken"/> that contains the values of every node in the source collection.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.CloneToken">
            <summary>
            Clones this object
            </summary>
            <returns>A cloned RavenJToken</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Raven.Json.Linq.RavenJToken"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Raven.Json.Linq.RavenJToken"/>.</param>
            <returns>A <see cref="T:Raven.Json.Linq.RavenJToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Raven.Json.Linq.RavenJToken"/> from an object using the specified <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Raven.Json.Linq.RavenJToken"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer"/> that will be used when reading the object.</param>
            <returns>A <see cref="T:Raven.Json.Linq.RavenJToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.ToString">
            <summary>
            Returns the indented JSON for this token.
            </summary>
            <returns>
            The indented JSON for this token.
            </returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>The JSON for this token using the given formatting and converters.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.ReadFrom(Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Raven.Json.Linq.RavenJToken"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Raven.Json.Linq.RavenJToken"/>.</param>
            <returns>
            An <see cref="T:Raven.Json.Linq.RavenJToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.Parse(System.String)">
            <summary>
            Load a <see cref="T:Raven.Json.Linq.RavenJToken"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Raven.Json.Linq.RavenJToken"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Raven.Json.Linq.RavenJToken"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Raven.Json.Linq.RavenJToken"/>.</param>
            <returns>
            An <see cref="T:Raven.Json.Linq.RavenJToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.Value``1(System.String)">
            <summary>
            Gets the <see cref="T:Raven.Json.Linq.RavenJToken"/> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.DeepEquals(Raven.Json.Linq.RavenJToken,Raven.Json.Linq.RavenJToken)">
            <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
            <param name="t1">The first <see cref="T:Raven.Json.Linq.RavenJToken"/> to compare.</param>
            <param name="t2">The second <see cref="T:Raven.Json.Linq.RavenJToken"/> to compare.</param>
            <returns>true if the tokens are equal; otherwise false.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.SelectToken(System.String)">
            <summary>
            Selects the token that matches the object path.
            </summary>
            <param name="path">
            The object path from the current <see cref="T:Raven.Json.Linq.RavenJToken"/> to the <see cref="T:Raven.Json.Linq.RavenJToken"/>
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJToken"/> that matches the object path or a null reference if no matching token is found.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.SelectToken(System.String,System.Boolean)">
            <summary>
            Selects the token that matches the object path.
            </summary>
            <param name="path">
            The object path from the current <see cref="T:Raven.Json.Linq.RavenJToken"/> to the <see cref="T:Raven.Json.Linq.RavenJToken"/>
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no token is found.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJToken"/> that matches the object path.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:Raven.Json.Linq.RavenJToken"/>, in document order.
            </returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.Values">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Boolean)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.DateTimeOffset)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Boolean})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Int64)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.DateTime})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Decimal})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Double})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Int16)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.UInt16)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Int32)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Int32})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.DateTime)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Int64})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Single})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Decimal)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Int16})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.UInt16})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.UInt32})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.UInt64})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Double)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Single)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.String)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.UInt32)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.UInt64)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Byte[])~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte[]"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="P:Raven.Json.Linq.RavenJToken.Type">
            <summary>
            Gets the node type for this <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Raven.Json.Linq.RavenJArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJArray"/> class.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJArray.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJArray.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJArray.Parse(System.String)">
            <summary>
            Load a <see cref="T:Raven.Json.Linq.RavenJArray"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Raven.Json.Linq.RavenJArray"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="P:Raven.Json.Linq.RavenJArray.Type">
            <summary>
            Gets the node type for this <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Raven.Json.Linq.RavenJArray.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Raven.Json.Linq.RavenJToken"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Raven.Json.Linq.RavenJObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJObject"/> class.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJObject.Value``1(System.String)">
            <summary>
            Gets the <see cref="T:Raven.Json.Linq.RavenJToken"/> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJObject.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Raven.Json.Linq.RavenJObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Raven.Json.Linq.RavenJObject"/>.</param>
            <returns>A <see cref="T:Raven.Json.Linq.RavenJObject"/> with the values of the specified object</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Raven.Json.Linq.RavenJArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Raven.Json.Linq.RavenJArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:Raven.Json.Linq.RavenJArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJObject.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Raven.Json.Linq.RavenJObject"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Raven.Json.Linq.RavenJObject"/>.</param>
            <returns>A <see cref="T:Raven.Json.Linq.RavenJObject"/> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJObject.Parse(System.String)">
            <summary>
            Load a <see cref="T:Raven.Json.Linq.RavenJObject"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Raven.Json.Linq.RavenJObject"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="P:Raven.Json.Linq.RavenJObject.Type">
            <summary>
            Gets the node type for this <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Raven.Json.Linq.RavenJObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Raven.Json.Linq.RavenJToken"/> with the specified property name.
            </summary>
            <value></value>
        </member>
        <member name="T:Raven.Json.Linq.RavenJTokenEqualityComparer">
            <summary>
            Compares tokens to determine whether they are equal.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenEqualityComparer.Equals(Raven.Json.Linq.RavenJToken,Raven.Json.Linq.RavenJToken)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:Raven.Json.Linq.RavenJToken"/> to compare.</param>
            <param name="y">The second object of type <see cref="T:Raven.Json.Linq.RavenJToken"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenEqualityComparer.GetHashCode(Raven.Json.Linq.RavenJToken)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenReader.#ctor(Raven.Json.Linq.RavenJToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJTokenReader"/> class.
            </summary>
            <param name="token">The token to read from.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="P:Raven.Json.Linq.RavenJTokenWriter.Token">
            <summary>
            Gets the token being writen.
            </summary>
            <value>The token being writen.</value>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Raven.Json.Linq.RavenJValue.Type">
            <summary>
            Gets the node type for this <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Raven.Json.Linq.RavenJValue.Value">
            <summary>
            Gets or sets the underlying token value.
            </summary>
            <value>The underlying token value.</value>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.IHoldProfilingInformation">
            <summary>
            Interface for getting profiling infomration about the actions of the system
            within a given context, usually the context is database commands or async database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.IHoldProfilingInformation.ProfilingInformation">
            <summary>
            The profiling information
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.ProfilingContext">
            <summary>
            Manages all profiling activities for a given item
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.ProfilingContext.RecordAction(System.Object,Raven.Client.Connection.Profiling.RequestResultArgs)">
            <summary>
            Register the action as associated with the sender
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.ProfilingContext.TryGet(System.Guid)">
            <summary>
            Try to get a session matching the specified id.
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.ProfilingInformation">
            <summary>
            Information about a particular session
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.ProfilingInformation.CreateProfilingInformation(System.Nullable{System.Guid})">
            <summary>
             Create a new instance of profiling information and provide additional context information
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.Requests">
            <summary>
             The requests made by this session
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.Id">
            <summary>
            Uniquely identify the session
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.At">
            <summary>
            The time when the session was created
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.DurationMilliseconds">
            <summary>
            The duration this session was opened
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.ProfilingInformation.#ctor(System.Nullable{System.Guid})">
            <summary>
             Create a new instance of this class
            </summary>
        </member>
        <member name="E:Raven.Client.Connection.Profiling.ProfilingInformation.OnContextCreated">
            <summary>
             A hook that allows extensions to provide additional information about the created context
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.ProfilingInformation.Context">
            <summary>
            Additional information that is added by extension
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.RequestResultArgs">
            <summary>
            The result of a request made to the server
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.RequestResultArgs.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Raven.Client.Connection.Profiling.RequestResultArgs"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.AdditionalInformation">
            <summary>
            Any additional information that might be required
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.At">
            <summary>
            When the request completed
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Status">
            <summary>
            The request status
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Url">
            <summary>
            The request Url
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.DurationMilliseconds">
            <summary>
            How long this request took
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Method">
            <summary>
            The request method
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.PostedData">
            <summary>
            The data posted to the server
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.HttpResult">
            <summary>
            The HTTP result for this request
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Result">
            <summary>
            The result of this request
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.RequestStatus">
            <summary>
            The status of the request
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.RequestStatus.SentToServer">
            <summary>
            The request was sent to the server
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.RequestStatus.Cached">
            <summary>
            The request was served directly from the local cache
            after checking with the server to see if it was still 
            up to date
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.RequestStatus.AggresivelyCached">
            <summary>
            The request was served from the local cache without
            checking with the server and may be out of date
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.RequestStatus.ErrorOnServer">
            <summary>
            The server returned an error
            </summary>
        </member>
        <member name="T:Raven.Client.Document.AbstractDocumentQuery`2">
            <summary>
              A query against a Raven index
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentQueryCustomization">
            <summary>
            Customize the document query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfNow">
            <summary>
            Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name="cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name="cutOff">The cut off.</param>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResults">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.Include(System.String)">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.CreateQueryForSelectedFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
            <param name="radius">The radius.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.IRavenQueryInspector">
            <summary>
            Provide access to the underlying <see cref="T:Raven.Client.IDocumentQuery`1"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IRavenQueryInspector.GetLastEqualityTerm">
            <summary>
            The last term that we asked the query to use equals on
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IRavenQueryInspector.IndexQueried">
            <summary>
            Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IRavenQueryInspector.AsyncDatabaseCommands">
            <summary>
            Grant access to the async database commands
            </summary>
        </member>
        <member name="T:Raven.Client.Document.IAbstractDocumentQuery`1">
            <summary>
             Mostly used by the linq provider
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
              Instruct the query to wait for non stale result for the specified wait timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.GetProjectionFields">
            <summary>
              Gets the fields for projection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.AddOrder(System.String,System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
              Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
            <param name = "fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Include(System.String)">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Take(System.Int32)">
            <summary>
              Takes the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Skip(System.Int32)">
            <summary>
              Skips the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Where(System.String)">
            <summary>
              Filter the results from the index using the specified where clause.
            </summary>
            <param name = "whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEquals(System.String,System.Object)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.OpenSubclause">
            <summary>
              Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
            <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
            <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.CloseSubclause">
            <summary>
              Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEquals(Raven.Client.WhereParams)">
            <summary>
              Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.NegateNext">
            <summary>
             Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereContains(System.String,System.Object)">
            <summary>
              Avoid using WhereConatins(), use Search() instead
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereContains(System.String,System.Object[])">
            <summary>
              Avoid using WhereConatins(), use Search() instead
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereContains(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
              Avoid using WhereConatins(), use Search() instead
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereStartsWith(System.String,System.Object)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEndsWith(System.String,System.Object)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereGreaterThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereLessThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.AndAlso">
            <summary>
              Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.OrElse">
            <summary>
              Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Boost(System.Decimal)">
            <summary>
              Specifies a boost weight to the last where clause.
              The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name = "boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Fuzzy(System.Decimal)">
            <summary>
              Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name = "fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Proximity(System.Int32)">
            <summary>
              Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name = "proximity">number of words within</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.OrderBy(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOfNow">
            <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name = "cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name = "cutOff">The cut off.</param>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResults">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Search(System.String,System.String)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.GetLastEqualityTerm">
            <summary>
              The last term that we asked the query to use equals on
            </summary>
        </member>
        <member name="P:Raven.Client.Document.IAbstractDocumentQuery`1.IndexQueried">
            <summary>
              Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Document.IAbstractDocumentQuery`1.DocumentConvention">
            <summary>
            Gets the document convention from the query session
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.negate">
            <summary>
            Whatever to negate the next operation
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theAsyncDatabaseCommands">
            <summary>
            Async database commands to use
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.indexName">
            <summary>
            The index to query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.projectionFields">
            <summary>
              The list of fields to project directly from the index
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.queryListeners">
            <summary>
            The query listeners for this query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theSession">
            <summary>
            The session for this query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.cutoff">
            <summary>
              The cutoff date to use for detecting staleness in the index
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.orderByFields">
            <summary>
              The fields to order the results by
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.sortByHints">
            <summary>
              The types to sort the fields by (NULL if not specified)
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.pageSize">
            <summary>
              The page size to use when querying the index
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theQueryText">
            <summary>
            The query to use
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.start">
            <summary>
              which record to start reading from
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.timeout">
            <summary>
            Timeout for this query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theWaitForNonStaleResults">
            <summary>
            Should we wait for non stale results
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.includes">
            <summary>
            The paths to include when loading the query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.aggregationOp">
            <summary>
            What aggregated operation to execute
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.groupByFields">
            <summary>
            Fields to group on
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.queryStats">
            <summary>
            Holds the query stats
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,System.String[],Raven.Client.Listeners.IDocumentQueryListener[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AbstractDocumentQuery`2"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.#ctor(Raven.Client.Document.AbstractDocumentQuery{`0,`1})">
            <summary>
              Initializes a new instance of the <see cref="T:Raven.Client.IDocumentQuery`1"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#Include(System.String)">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResults(System.TimeSpan)">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#CreateQueryForSelectedFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.CreateQueryForSelectedFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
              Filter matches to be inside the specified radius
            </summary>
            <param name = "radius">The radius.</param>
            <param name = "latitude">The latitude.</param>
            <param name = "longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GenerateQueryWithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
              Filter matches to be inside the specified radius
            </summary>
            <param name = "radius">The radius.</param>
            <param name = "latitude">The latitude.</param>
            <param name = "longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResults">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
              Instruct the query to wait for non stale result for the specified wait timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GetProjectionFields">
            <summary>
              Gets the fields for projection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AddOrder(System.String,System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
              Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
            <param name = "fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Include(System.String)">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Where(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Count(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Count">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Take(System.Int32)">
            <summary>
              Takes the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Skip(System.Int32)">
            <summary>
              Skips the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Where(System.String)">
            <summary>
              Filter the results from the index using the specified where clause.
            </summary>
            <param name = "whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEquals(System.String,System.Object)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OpenSubclause">
            <summary>
              Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
            <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
            <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.CloseSubclause">
            <summary>
              Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEquals(Raven.Client.WhereParams)">
            <summary>
              Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.NegateNext">
            <summary>
             Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereContains(System.String,System.Object)">
            <summary>
              Avoid using WhereConatins(), use Search() instead
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereContains(System.String,System.Object[])">
            <summary>
              Avoid using WhereConatins(), use Search() instead
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereContains(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
              Avoid using WhereConatins(), use Search() instead
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereStartsWith(System.String,System.Object)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEndsWith(System.String,System.Object)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereGreaterThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereLessThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AndAlso">
            <summary>
              Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OrElse">
            <summary>
              Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Boost(System.Decimal)">
            <summary>
              Specifies a boost weight to the last where clause.
              The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name = "boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Fuzzy(System.Decimal)">
            <summary>
              Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name = "fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Proximity(System.Int32)">
            <summary>
              Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name = "proximity">number of words within</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OrderBy(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfNow">
            <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name = "cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name = "cutOff">The cut off.</param>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOfNow">
            <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name = "cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name = "cutOff">The cut off.</param>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResults">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Statistics(Raven.Client.Linq.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
            <summary>
            Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.InvokeAfterQueryExecuted(Raven.Abstractions.Data.QueryResult)">
            <summary>
            Called externally to raise the after query executed callback
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GenerateIndexQuery(System.String)">
            <summary>
              Generates the index query.
            </summary>
            <param name = "query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Search(System.String,System.String)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GetLastEqualityTerm">
            <summary>
              The last term that we asked the query to use equals on
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.ToListAsync">
            <summary>
            Returns a list of results for a query asynchronously. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.CountAsync">
            <summary>
            Gets the total count of records for this query
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.IndexQueried">
            <summary>
              Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.AsyncDatabaseCommands">
            <summary>
              Grant access to the async database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.DocumentConvention">
            <summary>
            Gets the document convention from the query session
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.QueryText">
            <summary>
              Gets the query text built so far
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.QueryResultAsync">
            <summary>
              Gets the query result
              Execute the query the first time that this is called.
            </summary>
            <value>The query result.</value>
        </member>
        <member name="T:Raven.Client.Document.AsyncDocumentQuery`1">
            <summary>
            A query against a Raven index
            </summary>
        </member>
        <member name="T:Raven.Client.IAsyncDocumentQuery`1">
            <summary>
             Asyncronous query against a raven index
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentQueryBase`2">
            <summary>
              A query against a Raven index
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.NegateNext">
            <summary>
              Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Include(System.String)">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Where(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Count(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Count">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Take(System.Int32)">
            <summary>
              Takes the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Skip(System.Int32)">
            <summary>
              Skips the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Where(System.String)">
            <summary>
              Filter the results from the index using the specified where clause.
            </summary>
            <param name = "whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals(System.String,System.Object)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals(Raven.Client.WhereParams)">
            <summary>
              Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereContains(System.String,System.Object)">
            <summary>
              Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereContains(System.String,System.Object[])">
            <summary>
              Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereContains(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
              Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereStartsWith(System.String,System.Object)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEndsWith(System.String,System.Object)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AndAlso">
            <summary>
              Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrElse">
            <summary>
              Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Boost(System.Decimal)">
            <summary>
              Specifies a boost weight to the last where clause.
              The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name = "boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Fuzzy(System.Decimal)">
            <summary>
              Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name = "fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Proximity(System.Int32)">
            <summary>
              Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name = "proximity">number of words within</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
              Filter matches to be inside the specified radius
            </summary>
            <param name = "radius">The radius.</param>
            <param name = "latitude">The latitude.</param>
            <param name = "longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.SortByDistance">
            <summary>
              Sorts the query results by distance.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrderBy(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfNow">
            <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name = "cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name = "cutOff">The cut off.</param>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResults">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AddOrder(System.String,System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
              Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
            <param name = "fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OpenSubclause">
            <summary>
              Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.CloseSubclause">
            <summary>
              Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Search(System.String,System.String)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
            <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
            <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
            <summary>
            Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.InvokeAfterQueryExecuted(Raven.Abstractions.Data.QueryResult)">
            <summary>
            Called externally to raise the after query executed callback
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Statistics(Raven.Client.Linq.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentQueryBase`2.DocumentConvention">
            <summary>
            Gets the document convention from the query session
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentQueryBase`2.Not">
            <summary>
              Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.ToListAsync">
            <summary>
            Gets the query result
            </summary>
            <value>The query result.</value>
        </member>
        <member name="P:Raven.Client.IAsyncDocumentQuery`1.QueryResultAsync">
            <summary>
            Gets the query result
            Execute the query the first time that this is called.
            </summary>
            <value>The query result.</value>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,System.String[],Raven.Client.Listeners.IDocumentQueryListener[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AsyncDocumentQuery`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.#ctor(Raven.Client.Document.AsyncDocumentQuery{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AbstractDocumentQuery`2"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Include(System.String)">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Take(System.Int32)">
            <summary>
            Takes the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Skip(System.Int32)">
            <summary>
            Skips the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Where(System.String)">
            <summary>
            Filter the results from the index using the specified where clause.
            </summary>
            <param name="whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereEquals(System.String,System.Object)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereEquals(Raven.Client.WhereParams)">
            <summary>
            	Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereContains(System.String,System.Object)">
            <summary>
            	Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereContains(System.String,System.Object[])">
            <summary>
            	Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereContains(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            	Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereStartsWith(System.String,System.Object)">
            <summary>
            Matches fields which starts with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereEndsWith(System.String,System.Object)">
            <summary>
            Matches fields which ends with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereBetween(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereGreaterThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereLessThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#AndAlso">
            <summary>
            Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#OrElse">
            <summary>
            Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Boost(System.Decimal)">
            <summary>
            Specifies a boost weight to the last where clause.
            The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name="boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Fuzzy(System.Decimal)">
            <summary>
            Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name="fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Proximity(System.Int32)">
            <summary>
            Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name="proximity">number of words within</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
            <param name="radius">The radius.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#SortByDistance">
            <summary>
            Sorts the query results by distance.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#OrderBy(System.String[])">
            <summary>
            Order the results by the specified fields
            The fields are the names of the fields to sort, defaulting to sorting by ascending.
            You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOfNow">
            <summary>
            Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name="cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name="cutOff">The cut off.</param>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResults">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResults(System.TimeSpan)">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.CreateQueryForSelectedFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#AddOrder(System.String,System.Boolean)">
            <summary>
            Adds an ordering for a specific field to the query
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
            Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
            <param name="fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#OpenSubclause">
            <summary>
            Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Search(System.String,System.String)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#CloseSubclause">
            <summary>
            Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
            <summary>
             Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
             <remarks>
             This is only valid on dynamic indexes queries
             </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Statistics(Raven.Client.Linq.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.GenerateQueryWithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
            <param name="radius">The radius.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="P:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Not">
            <summary>
            Negate the next operation
            </summary>
        </member>
        <member name="T:Raven.Client.Document.AsyncMultiLoaderWithInclude`1">
            <summary>
            Fluent implementation for specifying include paths
            for loading documents
            </summary>
        </member>
        <member name="T:Raven.Client.Document.IAsyncLoaderWithInclude`1">
            <summary>
            Fluent interface for specifying include paths
            for loading documents
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Include(System.String)">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Load(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Load(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Load``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Include(System.String)">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Load(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Load(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.#ctor(Raven.Client.Document.Async.AsyncDocumentSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AsyncMultiLoaderWithInclude`1"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Load``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.AsyncSpatialDocumentQuery`1">
            <summary>
            A spatial query allows to perform spatial filtering on the index
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncSpatialDocumentQuery`1.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,System.String[],Raven.Client.Listeners.IDocumentQueryListener[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AsyncSpatialDocumentQuery`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncSpatialDocumentQuery`1.#ctor(Raven.Client.Document.AsyncDocumentQuery{`0},System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AsyncSpatialDocumentQuery`1"/> class.
            </summary>
            <param name="documentQuery">The document query.</param>
            <param name="radius">The radius.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncSpatialDocumentQuery`1.#ctor(Raven.Client.Document.AsyncDocumentQuery{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AsyncSpatialDocumentQuery`1"/> class.
            </summary>
            <param name="documentQuery">The document query.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncSpatialDocumentQuery`1.GenerateIndexQuery(System.String)">
            <summary>
            Generates the index query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1">
            <summary>
            Fluent interface for specifying include paths
            for loading documents lazily
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Include(System.String)">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.DocumentSessionListeners">
            <summary>
            Holder for all the listeners for the session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSessionListeners.#ctor">
            <summary>
            Create a new instance of this class
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSessionListeners.ConversionListeners">
            <summary>
            The conversion listeners
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSessionListeners.QueryListeners">
            <summary>
            The query listeners allow to modify queries before it is executed
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSessionListeners.StoreListeners">
            <summary>
            The store listeners
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSessionListeners.DeleteListeners">
            <summary>
            The delete listeners
            </summary>
        </member>
        <member name="T:Raven.Client.Document.FailoverBehavior">
            <summary>
            Options for handling failover scenarios in replication environment
            </summary>
        </member>
        <member name="F:Raven.Client.Document.FailoverBehavior.AllowReadsFromSecondaries">
            <summary>
            Allow to read from the secondary server(s), but immediately fail writes
            to the secondary server(s).
            </summary>
            <remarks>
            This is usually the safest approach, because it means that you can still serve
            read requests when the primary node is down, but don't have to deal with replication
            conflicts if there are writes to the secondary when the primary node is down.
            </remarks>
        </member>
        <member name="F:Raven.Client.Document.FailoverBehavior.AllowReadsFromSecondariesAndWritesToSecondaries">
            <summary>
            Allow to read from the secondary server(s), but immediately fail writes
            to the secondary server(s).
            </summary>
            <remarks>
            Choosing this option requires that you'll have some way of propogating changes
            made to the secondary server(s) to the primary node when the primary goes back
            up. 
            A typical strategy to handle this is to make sure that the replication is setup
            in a master/master relationship, so any writes to the secondary server will be 
            replicated to the master server.
            Please note, however, that this means that your code must be prepared to handle
            conflicts in case of different writes to the same document across nodes.
            </remarks>
        </member>
        <member name="F:Raven.Client.Document.FailoverBehavior.FailImmediately">
            <summary>
            Immediately fail the request, without attempting any failover. This is true for both 
            reads and writes
            </summary>
            <remarks>
            This is mostly useful when your replication setup is meant to be used for backups / external
            needs, and is not meant to be a failover storage
            </remarks>
        </member>
        <member name="T:Raven.Client.Extensions.DatabaseCommandsExtensions">
            <summary>
             Extension methods that make certain database command operations more convenient to use
            </summary>
        </member>
        <member name="M:Raven.Client.Extensions.DatabaseCommandsExtensions.PutIndexAsync``1(Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.Boolean)">
            <summary>
            Asynchronously creates an index
            </summary>
            <typeparam name="T">The type that defines the index to be create.</typeparam>
            <param name="commands">The hook to the database commands.</param>
            <param name="overwrite">Should the index be overwritten if it already exists.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.IDisposalNotification">
            <summary>
            Provide a way for interested party to tell whatever implementors have been disposed
            </summary>
        </member>
        <member name="E:Raven.Client.IDisposalNotification.AfterDispose">
            <summary>
            Called after dispose is completed
            </summary>
        </member>
        <member name="P:Raven.Client.IDisposalNotification.WasDisposed">
            <summary>
            Whatever the instance has been disposed
            </summary>
        </member>
        <member name="T:Raven.Client.Extensions.ExceptionExtensions">
            <summary>
             Extension methods to handle common scenarios
            </summary>
        </member>
        <member name="M:Raven.Client.Extensions.ExceptionExtensions.ExtractSingleInnerException(System.AggregateException)">
            <summary>
            Recursively examines the inner exceptions of an <see cref="T:System.AggregateException"/> and returns a single child exception.
            </summary>
            <returns>
            If any of the aggregated exceptions have more than one inner exception, null is returned.
            </returns>
        </member>
        <member name="M:Raven.Client.Extensions.ExceptionExtensions.SimplifyError(System.Exception)">
            <summary>
            Extracts a portion of an exception for a user friendly display
            </summary>
            <param name="e">The exception.</param>
            <returns>The primary portion of the exception message.</returns>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1">
            <summary>
            Abstract class used to provide infrastructure service for actual creation tasks
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractIndexCreationTask">
            <summary>
            Base class for creating indexes
            </summary>
            <remarks>
            The naming convention is that underscores in the inherited class names are replaced by slashed
            For example: Posts_ByName will be saved to Posts/ByName
            </remarks>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.CreateIndexDefinition">
            <summary>
            Creates the index definition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.CreateField(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Provide a way to dynamically index values with runtime known values
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.CreateField(System.String,System.Object)">
            <summary>
            Provide a way to dynamically index values with runtime known values
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.Recurse``2(``0,System.Func{``0,``1})">
            <summary>
            Allows to use lambdas recursively
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.MetadataFor(System.Object)">
            <summary>
            Allow to get to the metadata of the document
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.AsDocument(System.Object)">
            <summary>
            Allow to get to the metadata of the document
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.ExecuteAsync(Raven.Client.Connection.Async.IAsyncDatabaseCommands,Raven.Client.Document.DocumentConvention)">
            <summary>
            Executes the index creation against the specified document store.
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask.IndexName">
            <summary>
            Gets the name of the index.
            </summary>
            <value>The name of the index.</value>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask.Conventions">
            <summary>
            Gets or sets the document store.
            </summary>
            <value>The document store.</value>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Raven.Abstractions.Indexing.FieldIndexing)">
            <summary>
            Register a field to be indexed
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Store(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Raven.Abstractions.Indexing.FieldStorage)">
            <summary>
            Register a field to be stored
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Raven.Abstractions.Indexing.SortOptions)">
            <summary>
            Register a field to be sorted
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.TransformResults">
            <summary>
            The result translator definition
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Reduce">
            <summary>
            The reduce definition
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Stores">
            <summary>
            Index storage options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.IndexSortOptions">
            <summary>
            Index sort options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Analyzers">
            <summary>
            Index sort options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Indexes">
            <summary>
            Indexing options
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask`1">
            <summary>
            Allow to create indexes with multiple maps
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask`1.CreateIndexDefinition">
            <summary>
            Creates the index definition.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask">
            <summary>
            Allow to create indexes with multiple maps
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.IndexDefinitionBuilder`2">
            <summary>
            This class provides a way to define a strongly typed index on the client.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexDefinitionBuilder`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Indexes.IndexDefinitionBuilder`2"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexDefinitionBuilder`2.ToIndexDefinition(Raven.Client.Document.DocumentConvention,System.Boolean)">
            <summary>
            Toes the index definition.
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Map">
            <summary>
            Gets or sets the map function
            </summary>
            <value>The map.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Reduce">
            <summary>
            Gets or sets the reduce function
            </summary>
            <value>The reduce.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.TransformResults">
            <summary>
            Gets or sets the reduce function
            </summary>
            <value>The reduce.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Stores">
            <summary>
            Gets or sets the stores options
            </summary>
            <value>The stores.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Indexes">
            <summary>
            Gets or sets the indexing options
            </summary>
            <value>The indexes.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.SortOptions">
            <summary>
            Gets or sets the sort options.
            </summary>
            <value>The sort options.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Analyzers">
            <summary>
            Get os set the analyzers
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.IndexDefinitionBuilder`1">
            <summary>
            This class provides a way to define a strongly typed index on the client.
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.RavenDocumentsByEntityName">
            <summary>
             Create an index that allows to tag entities by their entity name
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.RavenDocumentsByEntityName.CreateIndexDefinition">
            <summary>
            Creates the Raven/DocumentsByEntityName index
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.RavenDocumentsByEntityName.IndexName">
            <summary>
            Return the actual index name
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.LinqExtensions">
            <summary>
             Extensions to the linq syntax
            </summary>
            <summary>
             Extensions to the linq syntax
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.ToList``1(Raven.Client.Linq.IRavenQueryable{``0})">
            <summary>
              This function exists solely to forbid calling ToList() on a queryable in Silverlight.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.ToArray``1(Raven.Client.Linq.IRavenQueryable{``0})">
            <summary>
              This function exists solely to forbid calling ToArray() on a queryable in Silverlight.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
              This function exists solely to forbid calling ToDictionary() on a queryable in Silverlight.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
              This function exists solely to forbid calling ToDictionary() on a queryable in Silverlight.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
              This function exists solely to forbid calling ToDictionary() on a queryable in Silverlight.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
              This function exists solely to forbid calling ToDictionary() on a queryable in Silverlight.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.ToFacetsAsync``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Query the facets results for this query using the specified facet document
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.As``1(System.Linq.IQueryable)">
            <summary>
            Project using a different type
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.AsProjection``1(System.Linq.IQueryable)">
            <summary>
            Project using a different type
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.SuggestAsync(System.Linq.IQueryable,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
            Suggest alternative values for the queried term
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.SuggestAsync(System.Linq.IQueryable)">
            <summary>
            Suggest alternative values for the queried term
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Search``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Decimal)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Lazily``1(System.Linq.IQueryable{``0})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Lazily``1(System.Linq.IQueryable{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            As well as a function to execute when the value is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.ToListAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns a list of results for a query asynchronously. 
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.CountAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns the total count of results for a query asynchronously. 
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Include``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Where``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Where``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.OrderBy``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.OrderBy``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.OrderByDescending``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.OrderByDescending``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Select``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Select``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
             implementation of In operator
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.In``1(``0,``0[])">
            <summary>
             implementation of In operator
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Skip``1(Raven.Client.Linq.IRavenQueryable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            Summary:
        </member>
        <member name="T:Raven.Client.Indexes.IndexDefinitionHelper">
            <summary>
            Generate index defintion from linq expressions
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexDefinitionHelper.PruneToFailureLinqQueryAsStringToWorkableCode``2(System.Linq.Expressions.LambdaExpression,Raven.Client.Document.DocumentConvention,System.String,System.Boolean)">
            <summary>
            Perform the actual generation
            </summary>
        </member>
        <member name="T:Raven.Client.Listeners.IDocumentConversionListener">
            <summary>
            Hook for users to provide additional logic for converting to / from 
            entities to document/metadata pairs.
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentConversionListener.EntityToDocument(System.Object,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Called when converting an entity to a document and metadata
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentConversionListener.DocumentToEntity(System.Object,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Called when converting a document and metadata to an entity
            </summary>
        </member>
        <member name="T:Raven.Client.Listeners.IDocumentDeleteListener">
            <summary>
            Hook for users to provide additional logic on delete operations
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentDeleteListener.BeforeDelete(System.String,System.Object,Raven.Json.Linq.RavenJObject)">
            <summary>
            Invoked before the delete request is sent to the server.
            </summary>
            <param name="key">The key.</param>
            <param name="entityInstance">The entity instance.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="T:Raven.Client.Listeners.IDocumentQueryListener">
            <summary>
            Hook for users to modify all queries globally
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentQueryListener.BeforeQueryExecuted(Raven.Client.IDocumentQueryCustomization)">
            <summary>
            Allow to customize a query globally
            </summary>
        </member>
        <member name="T:Raven.Client.Listeners.IDocumentStoreListener">
            <summary>
            Hook for users to provide additional logic on store operations
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentStoreListener.BeforeStore(System.String,System.Object,Raven.Json.Linq.RavenJObject)">
            <summary>
            Invoked before the store request is sent to the server.
            </summary>
            <param name="key">The key.</param>
            <param name="entityInstance">The entity instance.</param>
            <param name="metadata">The metadata.</param>
            <returns>
            Whatever the entity instance was modified and requires us re-serialize it.
            Returning true would force re-serialization of the entity, returning false would 
            mean that any changes to the entityInstance would be ignored in the current SaveChanges call.
            </returns>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentStoreListener.AfterStore(System.String,System.Object,Raven.Json.Linq.RavenJObject)">
            <summary>
            Invoked after the store request is sent to the server.
            </summary>
            <param name="key">The key.</param>
            <param name="entityInstance">The entity instance.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="T:Raven.Client.WhereParams">
            <summary>
            Parameters for the Where Equals call
            </summary>
        </member>
        <member name="M:Raven.Client.WhereParams.#ctor">
            <summary>
            Create a new instance 
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.FieldName">
            <summary>
            The field name
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.Value">
            <summary>
            The field value
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.IsAnalyzed">
            <summary>
            Should the field be analyzed
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.AllowWildcards">
            <summary>
            Should the field allow wildcards
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.IsNestedPath">
            <summary>
            Is this a root property or not?
            </summary>
        </member>
        <member name="T:Raven.Client.Silverlight.Connection.Async.AsyncServerClient">
            <summary>
            Access the database commands in async fashion
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands">
            <summary>
            An async database command operations
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetAsync(System.String)">
            <summary>
            Begins an async get operation
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetAsync(System.String[],System.String[])">
            <summary>
            Begins an async multi get operation
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetDocumentsAsync(System.Int32,System.Int32)">
            <summary>
            Begins an async get operation for documents
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
            <remarks>
            This is primarily useful for administration of a database
            </remarks>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetDocumentsStartingWithAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Begins an async get operation for documents whose id starts with the specified prefix
            </summary>
            <param name="prefix">Prefix that the ids begin with.</param>
            <param name="start">Paging start.</param>
            <param name="pageSize">Size of the page.</param>
            <remarks>
            This is primarily useful for administration of a database
            </remarks>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.QueryAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.String[])">
            <summary>
            Begins the async query.
            </summary>
            <param name="index">The index.</param>
            <param name="query">The query.</param>
            <param name="includes">The include paths</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.BatchAsync(Raven.Abstractions.Commands.ICommandData[])">
            <summary>
            Begins the async batch operation
            </summary>
            <param name="commandDatas">The command data.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.SuggestAsync(System.String,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
            Returns a list of suggestions based on the specified suggestion query.
            </summary>
            <param name="index">The index to query for suggestions</param>
            <param name="suggestionQuery">The suggestion query.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetIndexNamesAsync(System.Int32,System.Int32)">
            <summary>
            Gets the index names from the server asynchronously
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetIndexesAsync(System.Int32,System.Int32)">
            <summary>
            Gets the indexes from the server asynchronously
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.ResetIndexAsync(System.String)">
            <summary>
            Resets the specified index asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetIndexAsync(System.String)">
            <summary>
            Gets the index definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutIndexAsync(System.String,Raven.Abstractions.Indexing.IndexDefinition,System.Boolean)">
            <summary>
            Puts the index definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <param name="overwrite">Should overwrite index</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteIndexAsync(System.String)">
            <summary>
            Deletes the index definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteByIndexAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.Boolean)">
            <summary>
            Perform a set based deletes using the specified index.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToDelete">The query to delete.</param>
            <param name="allowStale">if set to <c>true</c> allow the operation while the index is stale.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteDocumentAsync(System.String)">
            <summary>
            Deletes the document for the specified id asynchronously
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutAsync(System.String,System.Nullable{System.Guid},Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Puts the document with the specified key in the database
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.CreateRequest(System.String,System.String)">
            <summary>
            Create a http request to the specified relative url on the current database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.ForDatabase(System.String)">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> that will interacts
            with the specified database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.ForDefaultDatabase">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> that will interacts
            with the default database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.With(System.Net.ICredentials)">
            <summary>
            Returns a new <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> using the specified credentials
            </summary>
            <param name="credentialsForSession">The credentials for session.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetStatisticsAsync">
            <summary>
            Retrieve the statistics for the database asynchronously
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetDatabaseNamesAsync">
            <summary>
            Gets the list of databases from the server asynchronously
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutAttachmentAsync(System.String,System.Nullable{System.Guid},System.Byte[],Raven.Json.Linq.RavenJObject)">
            <summary>
            Puts the attachment with the specified key asynchronously
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="data">The data.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetAttachmentAsync(System.String)">
            <summary>
            Gets the attachment by the specified key asynchronously
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteAttachmentAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Deletes the attachment with the specified key asynchronously
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetTermsAsync(System.String,System.String,System.String,System.Int32)">
            <summary>
             Get the possible terms for the specified field in the index asynchronously
             You can page through the results by use fromValue parameter as the 
             starting point for the next query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.EnsureSilverlightStartUpAsync">
            <summary>
            Ensures that the silverlight startup tasks have run
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DisableAllCaching">
            <summary>
            Disable all caching within the given scope
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.MultiGetAsync(Raven.Abstractions.Data.GetRequest[])">
            <summary>
            Perform a single POST requst containing multiple nested GET requests
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetFacetsAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.String)">
            <summary>
            Using the given Index, calculate the facets as per the specified doc
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Async.IAsyncDatabaseCommands.OperationsHeaders">
            <summary>
            Gets or sets the operations headers.
            </summary>
            <value>The operations headers.</value>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.#ctor(System.String,Raven.Client.Document.DocumentConvention,System.Net.ICredentials,Raven.Client.Silverlight.Connection.HttpJsonRequestFactory,System.Nullable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Silverlight.Connection.Async.AsyncServerClient"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.ForDatabase(System.String)">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> that will interacts
            with the specified database
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.ForDefaultDatabase">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> that will interacts
            with the default database
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.With(System.Net.ICredentials)">
            <summary>
            Returns a new <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> using the specified credentials
            </summary>
            <param name="credentialsForSession">The credentials for session.</param>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.GetRootDatabase">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> that will interact
            with the root database. Useful if the database has works against a tenant database.
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.GetAsync(System.String)">
            <summary>
            Begins an async get operation
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.HandleException(System.Net.WebException)">
            <summary>
            Attempts to handle an exception raised when receiving a response from the server
            </summary>
            <param name="e">The exception to handle</param>
            <returns>returns true if the exception is handled, false if it should be thrown</returns>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.MultiGetAsync(Raven.Abstractions.Data.GetRequest[])">
            <summary>
            Perform a single POST request containing multiple nested GET requests
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.GetFacetsAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.String)">
            <summary>
            Using the given Index, calculate the facets as per the specified doc
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.GetAsync(System.String[],System.String[])">
            <summary>
            Begins an async multi get operation
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.GetDocumentsAsync(System.Int32,System.Int32)">
            <summary>
            Begins an async get operation for documents
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
            <remarks>
            This is primarily useful for administration of a database
            </remarks>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.GetDocumentsStartingWithAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Begins an async get operation for documents whose id starts with the specified prefix
            </summary>
            <param name="prefix">Prefix that the ids begin with.</param>
            <param name="start">Paging start.</param>
            <param name="pageSize">Size of the page.</param>
            <remarks>
            This is primarily useful for administration of a database
            </remarks>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.QueryAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.String[])">
            <summary>
            Begins the async query.
            </summary>
            <param name="index">The index.</param>
            <param name="query">The query.</param>
            <param name="includes">The include paths</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.DeleteDocumentAsync(System.String)">
            <summary>
            Deletes the document for the specified id asynchronously
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.PutAsync(System.String,System.Nullable{System.Guid},Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Puts the document with the specified key in the database
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.GetIndexAsync(System.String)">
            <summary>
            Gets the index definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.PutIndexAsync(System.String,Raven.Abstractions.Indexing.IndexDefinition,System.Boolean)">
            <summary>
            Puts the index definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <param name="overwrite">Should overwrite index</param>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.DeleteIndexAsync(System.String)">
            <summary>
            Deletes the index definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.GetIndexNamesAsync(System.Int32,System.Int32)">
            <summary>
            Gets the index names from the server asynchronously
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.GetIndexesAsync(System.Int32,System.Int32)">
            <summary>
            Gets the indexes from the server asynchronously
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.ResetIndexAsync(System.String)">
            <summary>
            Resets the specified index asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.SuggestAsync(System.String,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
            Returns a list of suggestions based on the specified suggestion query.
            </summary>
            <param name="index">The index to query for suggestions</param>
            <param name="suggestionQuery">The suggestion query.</param>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.BatchAsync(Raven.Abstractions.Commands.ICommandData[])">
            <summary>
            Begins the async batch operation
            </summary>
            <param name="commandDatas">The command data.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.GetStatisticsAsync">
            <summary>
            Begins retrieving the statistics for the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.GetDatabaseNamesAsync">
            <summary>
            Gets the list of databases from the server asynchronously
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.PutAttachmentAsync(System.String,System.Nullable{System.Guid},System.Byte[],Raven.Json.Linq.RavenJObject)">
            <summary>
            Puts the attachment with the specified key asynchronously
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="data">The data.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.GetAttachmentAsync(System.String)">
            <summary>
            Gets the attachment by the specified key asynchronously
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.DeleteAttachmentAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Deletes the attachment with the specified key asynchronously
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.EnsureSilverlightStartUpAsync">
            <summary>
            Ensures that the silverlight startup tasks have run
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.GetTermsAsync(System.String,System.String,System.String,System.Int32)">
            <summary>
             Get the possible terms for the specified field in the index asynchronously
             You can page through the results by use fromValue parameter as the 
             starting point for the next query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.DisableAllCaching">
            <summary>
            Disable all caching within the given scope
            </summary>
        </member>
        <member name="P:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.JsonRequestFactory">
            <summary>
            Get the current json request factory
            </summary>
        </member>
        <member name="P:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.OperationsHeaders">
            <summary>
            Gets or sets the operations headers.
            </summary>
            <value>The operations headers.</value>
        </member>
        <member name="P:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.ProfilingInformation">
            <summary>
            The profiling information
            </summary>
        </member>
        <member name="T:Raven.Client.Silverlight.Connection.Async.AsyncServerClient.IndexContainer">
            <summary>
            Used for deserialization only :-P
            </summary>
        </member>
        <member name="T:Raven.Client.Silverlight.Connection.HttpJsonRequest">
            <summary>
            A representation of an HTTP json request to the RavenDB server
            Since we are using the ClientHttp stack for Silverlight, we don't need to implement
            caching, it is already implemented for us.
            Note: that the RavenDB server generates both an ETag and an Expires header to ensure proper
            Note: behavior from the silverlight http stack
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.HttpJsonRequest.ReadResponseStringAsync">
            <summary>
            Begins the read response string.
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.HttpJsonRequest.WriteAsync(System.String)">
            <summary>
            Begins the write operation
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.HttpJsonRequest.WriteAsync(System.Byte[])">
            <summary>
            Begins the write operation
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.HttpJsonRequest.AddOperationHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds the operation headers.
            </summary>
            <param name="operationsHeaders">The operations headers.</param>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.HttpJsonRequest.AddOperationHeader(System.String,System.String)">
            <summary>
            Adds the operation header
            </summary>
        </member>
        <member name="P:Raven.Client.Silverlight.Connection.HttpJsonRequest.ResponseHeaders">
            <summary>
            Gets or sets the response headers.
            </summary>
            <value>The response headers.</value>
        </member>
        <member name="P:Raven.Client.Silverlight.Connection.HttpJsonRequest.ResponseStatusCode">
            <summary>
            Gets or sets the response status code.
            </summary>
            <value>The response status code.</value>
        </member>
        <member name="P:Raven.Client.Silverlight.Connection.HttpJsonRequest.WaitForTask">
            <summary>
            The task to wait all other actions on
            </summary>
        </member>
        <member name="T:Raven.Client.Silverlight.Connection.HttpJsonRequestFactory">
            <summary>
             Create the HTTP Json Requests to the RavenDB Server
             and manages the http cache
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.HttpJsonRequestFactory.InvokeLogRequest(Raven.Client.Connection.Profiling.IHoldProfilingInformation,Raven.Client.Connection.Profiling.RequestResultArgs)">
            <summary>
            Invoke the LogRequest event
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.HttpJsonRequestFactory.CreateHttpJsonRequest(System.Object,System.String,System.String,System.Net.ICredentials,Raven.Client.Document.DocumentConvention)">
            <summary>
            Creates the HTTP json request.
            </summary>
            <param name="self">The self.</param>
            <param name="url">The URL.</param>
            <param name="method">The method.</param>
            <param name="credentials">The credentials.</param>
            <param name="convention">The document conventions governing this request</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.HttpJsonRequestFactory.CreateHttpJsonRequest(System.Object,System.String,System.String,Raven.Json.Linq.RavenJObject,System.Net.ICredentials,Raven.Client.Document.DocumentConvention)">
            <summary>
            Creates the HTTP json request.
            </summary>
            <param name="self">The self.</param>
            <param name="url">The URL.</param>
            <param name="method">The method.</param>
            <param name="metadata">The metadata.</param>
            <param name="credentials">The credentials.</param>
            <param name="convention">The document conventions governing this request</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Silverlight.Connection.HttpJsonRequestFactory.EnableBasicAuthenticationOverUnsecureHttpEvenThoughPasswordsWouldBeSentOverTheWireInClearTextToBeStolenByHackers">
            <summary>
            Advanced: Don't set this unless you know what you are doing!
            
            Enable using basic authentication using http
            By default, RavenDB only allows basic authentication over HTTPS, setting this property to true
            will instruct RavenDB to make unsecure calls (usually only good for testing / internal networks).
            </summary>
        </member>
        <member name="E:Raven.Client.Silverlight.Connection.HttpJsonRequestFactory.ConfigureRequest">
            <summary>
            Occurs when a json request is created
            </summary>
        </member>
        <member name="E:Raven.Client.Silverlight.Connection.HttpJsonRequestFactory.LogRequest">
            <summary>
            Occurs when a json request is completed
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Commands.DeleteCommandData">
            <summary>
            A single batch operation for a document DELETE
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Commands.ICommandData">
            <summary>
            A single operation inside a batch
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Commands.ICommandData.ToJson">
            <summary>
            Translate this instance to a Json object.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Commands.ICommandData.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.ICommandData.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.ICommandData.Etag">
            <summary>
            Gets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.ICommandData.TransactionInformation">
            <summary>
            Gets the transaction information.
            </summary>
            <value>The transaction information.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.ICommandData.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="M:Raven.Abstractions.Commands.DeleteCommandData.ToJson">
            <summary>
            Translate this instance to a Json object.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Commands.DeleteCommandData.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.DeleteCommandData.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.DeleteCommandData.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.DeleteCommandData.TransactionInformation">
            <summary>
            Gets or sets the transaction information.
            </summary>
            <value>The transaction information.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.DeleteCommandData.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="T:Raven.Abstractions.Commands.PatchCommandData">
            <summary>
             A single batch operation for a document PATCH
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Commands.PatchCommandData.ToJson">
            <summary>
            Translate this instance to a Json object.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Commands.PatchCommandData.Patches">
            <summary>
            Gets or sets the patches applied to this document
            </summary>
            <value>The patches.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PatchCommandData.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PatchCommandData.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PatchCommandData.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PatchCommandData.TransactionInformation">
            <summary>
            Gets the transaction information.
            </summary>
            <value>The transaction information.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PatchCommandData.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="T:Raven.Abstractions.Commands.PutCommandData">
            <summary>
            A single batch operation for a document PUT
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Commands.PutCommandData.ToJson">
            <summary>
            Translate this instance to a Json object.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Commands.PutCommandData.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PutCommandData.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PutCommandData.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PutCommandData.Document">
            <summary>
            Gets or sets the document.
            </summary>
            <value>The document.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PutCommandData.TransactionInformation">
            <summary>
            Gets the transaction information.
            </summary>
            <value>The transaction information.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PutCommandData.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="T:Raven.Abstractions.Data.Attachment">
            <summary>
            Attachment data and metadata
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.Attachment.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.Attachment.Size">
            <summary>
            The size of the attachment
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.Attachment.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.Attachment.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="T:Raven.Abstractions.Data.BatchResult">
            <summary>
            The result of a single operation inside a batch
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.BatchResult.Etag">
            <summary>
            Gets or sets the etag generated by the etag (if applicable)
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.BatchResult.Method">
            <summary>
            Gets or sets the method used for the operation (PUT,DELETE,PATCH).
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.BatchResult.Key">
            <summary>
            Gets or sets the key of the document
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.BatchResult.Metadata">
            <summary>
            Gets or sets the updated metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="T:Raven.Abstractions.Data.JsonDocument">
            <summary>
            A document representation:
            * Data / Projection
            * Etag
            * Metadata
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.JsonDocument.#ctor">
            <summary>
            Create a new instance of JsonDocument
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.JsonDocument.ToJson">
            <summary>
            	Translate the json document to a <see cref="T:Raven.Json.Linq.RavenJObject"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocument.DataAsJson">
            <summary>
            	Gets or sets the document data as json.
            </summary>
            <value>The data as json.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocument.Metadata">
            <summary>
            	Gets or sets the metadata for the document
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocument.Key">
            <summary>
            	Gets or sets the key for the document
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocument.NonAuthoritativeInformation">
            <summary>
            	Gets or sets a value indicating whether this document is non authoritative (modified by uncommitted transaction).
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocument.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocument.LastModified">
            <summary>
            	Gets or sets the last modified date for the document
            </summary>
            <value>The last modified.</value>
        </member>
        <member name="T:Raven.Abstractions.Data.MultiLoadResult">
            <summary>
            Represent a result which include both document results and included documents
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.MultiLoadResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Data.MultiLoadResult"/> class.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.MultiLoadResult.Results">
            <summary>
            Gets or sets the document results.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.MultiLoadResult.Includes">
            <summary>
            Gets or sets the included documents
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Data.PatchCommandType">
            <summary>
            Patch command options
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchCommandType.Set">
            <summary>
            Set a property
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchCommandType.Unset">
            <summary>
            Unset (remove) a property
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchCommandType.Add">
            <summary>
            Add an item to an array
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchCommandType.Insert">
            <summary>
            Insert an item to an array at a specified position
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchCommandType.Remove">
            <summary>
            Remove an item from an array at a specified position
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchCommandType.Modify">
            <summary>
            Modify a property value by providing a nested set of patch operation
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchCommandType.Inc">
            <summary>
            Increment a property by a specified value
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchCommandType.Copy">
            <summary>
            Copy a property value to another property
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchCommandType.Rename">
            <summary>
            Rename a property
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Data.PatchRequest">
            <summary>
            A patch request for a specified document
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.PatchRequest.ToJson">
            <summary>
            Translate this instance to json
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.PatchRequest.FromJson(Raven.Json.Linq.RavenJObject)">
            <summary>
            Create an instance from a json object
            </summary>
            <param name="patchRequestJson">The patch request json.</param>
        </member>
        <member name="P:Raven.Abstractions.Data.PatchRequest.Type">
            <summary>
            Gets or sets the type of the operation
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.PatchRequest.PrevVal">
            <summary>
            Gets or sets the previous value, which is compared against the current value to verify a
            change isn't overwriting new values.
            If the value is null, the operation is always successful
            </summary>
            <value>The previous value.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.PatchRequest.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.PatchRequest.Nested">
            <summary>
            Gets or sets the nested operations to perform. This is only valid when the <see cref="P:Raven.Abstractions.Data.PatchRequest.Type"/> is <see cref="F:Raven.Abstractions.Data.PatchCommandType.Modify"/>.
            </summary>
            <value>The nested.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.PatchRequest.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.PatchRequest.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.PatchRequest.AllPositions">
            <summary>
            Get or sets AllPositions. Set this property to true if you want to modify all items in an collection.
            </summary>
            <value>AllPositions true/false</value>
        </member>
        <member name="T:Raven.Abstractions.Data.PatchResult">
            <summary>
            The result of a patch operation
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchResult.DocumentDoesNotExists">
            <summary>
            The document does not exists, operation was a no-op
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchResult.Patched">
            <summary>
            Document was properly patched
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Data.PutResult">
            <summary>
            The result of a PUT operation
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.PutResult.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.PutResult.ETag">
            <summary>
            Gets or sets the generated Etag for the PUT operation
            </summary>
            <value>The Etag.</value>
        </member>
        <member name="T:Raven.Abstractions.Data.SortedField">
            <summary>
            Represent a field sort options
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.SortedField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Data.SortedField"/> class.
            </summary>
            <param name="fieldWithPotentialPrefix">The field with potential prefix.</param>
        </member>
        <member name="P:Raven.Abstractions.Data.SortedField.Field">
            <summary>
            Gets or sets the field.
            </summary>
            <value>The field.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.SortedField.Descending">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Raven.Abstractions.Data.SortedField"/> is descending.
            </summary>
            <value><c>true</c> if descending; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Raven.Abstractions.Data.SpatialIndexQuery">
            <summary>
            A query using spatial filtering
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Data.IndexQuery">
            <summary>
            All the information required to query a Raven index
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.IndexQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Data.IndexQuery"/> class.
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.IndexQuery.GetIndexQueryUrl(System.String,System.String,System.String)">
            <summary>
            Gets the index query URL.
            </summary>
            <param name="operationUrl">The operation URL.</param>
            <param name="index">The index.</param>
            <param name="operationName">Name of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Abstractions.Data.IndexQuery.GetCustomQueryStringVariables">
            <summary>
            Gets the custom query string variables.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.Query">
            <summary>
            Gets or sets the query.
            </summary>
            <value>The query.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.TotalSize">
            <summary>
            Gets or sets the total size.
            </summary>
            <value>The total size.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.Start">
            <summary>
            Gets or sets the start of records to read.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.PageSize">
            <summary>
            Gets or sets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.AggregationOperation">
            <summary>
            The aggregation operation for this query
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.GroupBy">
            <summary>
            The fields to group the query by
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.FieldsToFetch">
            <summary>
            Gets or sets the fields to fetch.
            </summary>
            <value>The fields to fetch.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.SortedFields">
            <summary>
            Gets or sets the fields to sort by
            </summary>
            <value>The sorted fields.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.Cutoff">
            <summary>
            Gets or sets the cutoff date
            </summary>
            <value>The cutoff.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.CutoffEtag">
            <summary>
            Gets or sets the cutoff etag
            </summary>
            <remarks>
            Cutoff etag is used to check if the index has already process a document with the given
            etag. Unlike Cutoff, which uses dates and is susceptible to clock syncronization issues between
            machines, cutoff etag doesn't rely on both the server and client having a syncronized clock and 
            can work without it.
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this
            etag belong to is actually considered for the results. 
            What it does it guarantee that the document has been mapped, but not that the mapped values has been reduce. 
            Since map/reduce queries, by their nature,tend to be far less susceptible to issues with staleness, this is 
            considered to be an acceptable tradeoff.
            If you need absolute no staleness with a map/reduce index, you will need to ensure syncronized clocks and 
            use the Cutoff date option, instead.
            </remarks>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.SkipTransformResults">
            <summary>
            If set to true, RavenDB won't execute the transform results function
            returning just the raw results instead
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.SkippedResults">
            <summary>
            Gets or sets the number of skipped results.
            </summary>
            <value>The skipped results.</value>
        </member>
        <member name="M:Raven.Abstractions.Data.SpatialIndexQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Data.SpatialIndexQuery"/> class.
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.SpatialIndexQuery.#ctor(Raven.Abstractions.Data.IndexQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Data.SpatialIndexQuery"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Raven.Abstractions.Data.SpatialIndexQuery.GetCustomQueryStringVariables">
            <summary>
            Gets the custom query string variables.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Abstractions.Data.SpatialIndexQuery.Latitude">
            <summary>
            Gets or sets the latitude.
            </summary>
            <value>The latitude.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.SpatialIndexQuery.Longitude">
            <summary>
            Gets or sets the longitude.
            </summary>
            <value>The longitude.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.SpatialIndexQuery.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="T:Raven.Abstractions.Data.StringDistanceTypes">
            <summary>
            String distance algorithms used in suggestion query
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.StringDistanceTypes.Default">
            <summary>
            Default, equivalent to Levenshtein
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.StringDistanceTypes.JaroWinkler">
            <summary>
            JaroWinkler distance algorithm
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.StringDistanceTypes.Levenshtein">
            <summary>
            Levenshtein distance algorithm (default)
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.StringDistanceTypes.NGram">
            <summary>
            NGram distance algorithm
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Data.SuggestionQuery">
            <summary>
            
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.SuggestionQuery.#ctor">
            <summary>
            Create a new instance of <seealso cref="T:Raven.Abstractions.Data.SuggestionQuery"/>
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.SuggestionQuery.Term">
            <summary>
            Gets or sets the term. The term is what the user likely entered, and will used as the basis of the suggestions.
            </summary>
            <value>The term.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.SuggestionQuery.Field">
            <summary>
            Gets or sets the field to be used in conjunction with the index.
            </summary>
            <value>The field.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.SuggestionQuery.MaxSuggestions">
            <summary>
            Gets or sets the number of suggestions to return.
            </summary>
            <value>The number of suggestions.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.SuggestionQuery.Distance">
            <summary>
            Gets or sets the string distance algorithm.
            </summary>
            <value>The distance.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.SuggestionQuery.Accuracy">
            <summary>
            Gets or sets the accuracy.
            </summary>
            <value>The accuracy.</value>
        </member>
        <member name="T:Raven.Abstractions.Data.SuggestionQueryResult">
            <summary>
            The result of the suggestion query
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.SuggestionQueryResult.Suggestions">
            <summary>
            The suggestions based on the term and dictionary
            </summary>
            <value>The suggestions.</value>
        </member>
        <member name="T:Raven.Abstractions.Data.TransactionInformation">
            <summary>
            Transaction information that identify the transaction id and timeout
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.TransactionInformation.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.TransactionInformation.Timeout">
            <summary>
            Gets or sets the timeout.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="T:Raven.Abstractions.Exceptions.ConcurrencyException">
            <summary>
            This exception is raised when a concurrency conflict is encountered
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.ConcurrencyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.ConcurrencyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.ConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="P:Raven.Abstractions.Exceptions.ConcurrencyException.ExpectedETag">
            <summary>
            Gets or sets the expected E tag.
            </summary>
            <value>The expected E tag.</value>
        </member>
        <member name="P:Raven.Abstractions.Exceptions.ConcurrencyException.ActualETag">
            <summary>
            Gets or sets the actual E tag.
            </summary>
            <value>The actual E tag.</value>
        </member>
        <member name="T:Raven.Abstractions.Extensions.DisposableAction">
            <summary>
            A helper class that translate between Disposable and Action
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.DisposableAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Extensions.DisposableAction"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Raven.Abstractions.Extensions.DisposableAction.Dispose">
            <summary>
            Execute the relevant actions
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Extensions.ExpressionExtensions">
            <summary>
             Extensions for Linq expressions
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.ExpressionExtensions.ToPropertyPath``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
             Turn an expression like x=&lt; x.User.Name to "User.Name"
            </summary>
            <param name="expr">Expression for member access</param>
        </member>
        <member name="T:Raven.Abstractions.Extensions.JsonExtensions">
            <summary>
            Json extensions 
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.JsonExtensions.ToJObject(System.Byte[])">
            <summary>
            Convert a byte array to a RavenJObject
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.JsonExtensions.ToJObject(System.IO.Stream)">
            <summary>
            Convert a byte array to a RavenJObject
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.JsonExtensions.WriteTo(Raven.Json.Linq.RavenJToken,System.IO.Stream)">
            <summary>
            Convert a RavenJToken to a byte array
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.JsonExtensions.JsonDeserialization``1(System.Byte[])">
            <summary>
            Deserialize a <param name="self"/> to an instance of <typeparam name="T"/>
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.JsonExtensions.JsonDeserialization``1(Raven.Json.Linq.RavenJObject)">
            <summary>
            Deserialize a <param name="self"/> to an instance of<typeparam name="T"/>
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Extensions.MetadataExtensions">
            <summary>
            Extensions for handling metadata
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.MetadataExtensions.FilterHeaders(Raven.Json.Linq.RavenJObject,System.Boolean)">
            <summary>
            Filters the headers from unwanted headers
            </summary>
            <param name="self">The self.</param>
            <param name="isServerDocument">if set to <c>true</c> [is server document].</param>
            <returns></returns>public static RavenJObject FilterHeaders(this System.Collections.Specialized.NameValueCollection self, bool isServerDocument)
        </member>
        <member name="M:Raven.Abstractions.Extensions.MetadataExtensions.FilterHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}},System.Boolean)">
            <summary>
            Filters the headers from unwanted headers
            </summary>
            <param name="self">The self.</param>
            <param name="isServerDocument">if set to <c>true</c> [is server document].</param>
            <returns></returns>public static RavenJObject FilterHeaders(this System.Collections.Specialized.NameValueCollection self, bool isServerDocument)
        </member>
        <member name="T:Raven.Abstractions.Extensions.Reference`1">
            <summary>
            A reference that can be used with lambda expression
            to pass a value out.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Extensions.Reference`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Raven.Abstractions.Extensions.StreamExtension">
            <summary>
            Extensions for working with streams
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.StreamExtension.ReadData(System.IO.Stream)">
            <summary>
            	Reads the entire request buffer to memory and
            	return it as a byte array.
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Indexing.FieldIndexing">
            <summary>
            Options for indexing a field
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.FieldIndexing.No">
            <summary>
            Do not index the field value. This field can thus not be searched, but one can still access its contents provided it is stored.
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.FieldIndexing.Analyzed">
            <summary>
            Index the tokens produced by running the field's value through an Analyzer. This is useful for common text.
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.FieldIndexing.NotAnalyzed">
            <summary>
            Index the field's value without using an Analyzer, so it can be searched.  As no analyzer is used the 
            value will be stored as a single term. This is useful for unique Ids like product numbers.
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.FieldIndexing.Default">
            <summary>
            Index this field using the default internal analyzer: LowerCaseKeywordAnalyzer
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Indexing.FieldStorage">
            <summary>
            Specifies whether and how a field should be stored.
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.FieldStorage.Yes">
            <summary>
            Store the original field value in the index. This is useful for short texts like a document's title which should be displayed with the results. 
            The value is stored in its original form, i.e. no analyzer is used before it is stored.
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.FieldStorage.No">
            <summary>
            Do not store the field value in the index.
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.FieldStorage.Compress">
            <summary>
            Store the original field value in the index in a compressed form. This is useful for long documents and for binary valued fields.
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Indexing.IndexDefinition">
            <summary>
            A definition of a RavenIndex
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Indexing.IndexDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Indexing.IndexDefinition"/> class.
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Indexing.IndexDefinition.Equals(Raven.Abstractions.Indexing.IndexDefinition)">
            <summary>
            Equals the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Abstractions.Indexing.IndexDefinition.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Abstractions.Indexing.IndexDefinition.GetIndexHash">
            <summary>
            Provide a cached version of the index hash code, which is used when generating
            the index etag. 
            It isn't really useful for anything else, in particular, we cache that because
            we want to avoid calculating the cost of doing this over and over again on each 
            query.
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Indexing.IndexDefinition.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Raven.Abstractions.Indexing.IndexDefinition.RemoveDefaultValues">
            <summary>
            Remove the default values that we don't actually need
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Name">
            <summary>
            Get or set the name of the index
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Map">
            <summary>
            Gets or sets the map function, if there is only one
            </summary>
            <remarks>
            This property only exists for backward compatability purposes
            </remarks>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Maps">
            <summary>
            All the map functions for this index
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Reduce">
            <summary>
            Gets or sets the reduce function
            </summary>
            <value>The reduce.</value>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.TransformResults">
            <summary>
            Gets or sets the translator function
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.IsMapReduce">
            <summary>
            Gets a value indicating whether this instance is map reduce index definition
            </summary>
            <value>
            	<c>true</c> if this instance is map reduce; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.IsTemp">
            <summary>
            Returns a boolean value indicating whether this IndexDefinition is of a temporary index
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Stores">
            <summary>
            Gets or sets the stores options
            </summary>
            <value>The stores.</value>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Indexes">
            <summary>
            Gets or sets the indexing options
            </summary>
            <value>The indexes.</value>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.SortOptions">
            <summary>
            Gets or sets the sort options.
            </summary>
            <value>The sort options.</value>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Analyzers">
            <summary>
            Gets or sets the analyzers options
            </summary>
            <value>The analyzers.</value>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Fields">
            <summary>
            The fields that are queryable in the index
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Indexing.NumberUtil">
            <summary>
            Helper function for numeric to indexed string and vice versa
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Indexing.NumberUtil.NumberToString(System.Int32)">
            <summary>
            Translate a number to an indexable string
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Indexing.NumberUtil.NumberToString(System.Int64)">
            <summary>
            Translate a number to an indexable string
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Indexing.NumberUtil.NumberToString(System.Single)">
            <summary>
            Translate a number to an indexable string
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Indexing.NumberUtil.NumberToString(System.Double)">
            <summary>
            Translate a number to an indexable string
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Indexing.NumberUtil.StringToNumber(System.String)">
            <summary>
            Translate an indexable string to a number
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Json.JsonEnumConverter">
            <summary>
            Convert an enum to a json string
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter">
            <summary>
            Convert a MultiDimensional Array to a json string
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.ReadRank(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Read in all the values from the Json reader and populate a nested ArrayList
            </summary>
            <param name="reader">JsonReader to use</param>
            <param name="serializer">JsonSerializer to use</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.GetRankLengthList(System.Collections.Generic.List{System.Object})">
            <summary>
            Retrieve a list of lengths for each rank represented
            </summary>
            <param name="arrayList">The list to process</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.SetValues(System.Array,System.Int32[],System.Int32[],System.Int32,System.Collections.Generic.List{System.Object})">
            <summary>
            Assign values from the ArrayList into their respective place in the multidimensional array
            </summary>
            <param name="multiDimensionalArray">Array that will be receiving the newValues</param>
            <param name="rankLengthList">A list of the lengths of each rank</param>
            <param name="assignToIndexList">A list of the current index settings to be used for assignments</param>
            <param name="currentRank">Rank currently being processed</param>
            <param name="newValues">New Values that will be used in the assignment</param>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.WriteRank(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonSerializer,System.Array,System.Int32,System.Int32[])">
            <summary>
            Write a rank of an array in Json format
            </summary>
            <param name="writer">JsonWriter in use</param>
            <param name="serializer">JsonSerializer in use</param>
            <param name="array">Array to be written</param>
            <param name="currentRank">Current rank "depth"</param>
            <param name="assignFromIndexList">List of indexes currently being used to read from the array</param>
        </member>
        <member name="T:Raven.Abstractions.Json.JTokenExtensions">
            <summary>
            Extensions for RavenJToken
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Linq.DateTools">
            <summary> Provides support for converting dates to strings and vice-versa.
            The strings are structured so that lexicographic sorting orders 
            them by date, which makes them suitable for use as field values 
            and search terms.
            
            <p/>This class also helps you to limit the resolution of your dates. Do not
            save dates with a finer resolution than you really need, as then
            RangeQuery and PrefixQuery will require more memory and become slower.
            
            <p/>Compared to {@link DateField} the strings generated by the methods
            in this class take slightly more space, unless your selected resolution
            is set to <code>Resolution.DAY</code> or lower.
            
            <p/>
            Another approach is {@link NumericUtils}, which provides
            a sortable binary representation (prefix encoded) of numeric values, which
            date/time are.
            For indexing a {@link Date} or {@link Calendar}, just get the Unix timestamp as
            <code>long</code> using {@link Date#getTime} or {@link Calendar#getTimeInMillis} and
            index this as a numeric value with {@link NumericField}
            and use {@link NumericRangeQuery} to query it.
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Linq.DateTools.DateToString(System.DateTime,Raven.Abstractions.Linq.DateTools.Resolution)">
            <summary> Converts a Date to a string suitable for indexing.
            
            </summary>
            <param name="date">the date to be converted
            </param>
            <param name="resolution">the desired resolution, see
            {@link #Round(Date, DateTools.Resolution)}
            </param>
            <returns> a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,
            depending on <code>resolution</code>; using GMT as timezone 
            </returns>
        </member>
        <member name="M:Raven.Abstractions.Linq.DateTools.TimeToString(System.Int64,Raven.Abstractions.Linq.DateTools.Resolution)">
            <summary> Converts a millisecond time to a string suitable for indexing.
            
            </summary>
            <param name="time">the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT
            </param>
            <param name="resolution">the desired resolution, see
            {@link #Round(long, DateTools.Resolution)}
            </param>
            <returns> a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,
            depending on <code>resolution</code>; using GMT as timezone
            </returns>
        </member>
        <member name="M:Raven.Abstractions.Linq.DateTools.StringToTime(System.String)">
            <summary> Converts a string produced by <code>timeToString</code> or
            <code>DateToString</code> back to a time, represented as the
            number of milliseconds since January 1, 1970, 00:00:00 GMT.
            
            </summary>
            <param name="dateString">the date string to be converted
            </param>
            <returns> the number of milliseconds since January 1, 1970, 00:00:00 GMT
            </returns>
            <throws>  ParseException if <code>dateString</code> is not in the  </throws>
            <summary>  expected format 
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Linq.DateTools.StringToDate(System.String)">
            <summary> Converts a string produced by <code>timeToString</code> or
            <code>DateToString</code> back to a time, represented as a
            Date object.
            
            </summary>
            <param name="dateString">the date string to be converted
            </param>
            <returns> the parsed time as a Date object 
            </returns>
            <throws>  ParseException if <code>dateString</code> is not in the  </throws>
            <summary>  expected format 
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Linq.DateTools.Round(System.DateTime,Raven.Abstractions.Linq.DateTools.Resolution)">
            <summary>
            Limit a date's resolution. For example, the date <code>2004-09-21 13:50:11</code>
            will be changed to <code>2004-09-01 00:00:00</code> when using
            <code>Resolution.MONTH</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="resolution">The desired resolution of the date to be returned</param>
            <returns>
            the date with all values more precise than <code>resolution</code>
            set to 0 or 1
            </returns>
        </member>
        <member name="M:Raven.Abstractions.Linq.DateTools.Round(System.Int64,Raven.Abstractions.Linq.DateTools.Resolution)">
            <summary> Limit a date's resolution. For example, the date <code>1095767411000</code>
            (which represents 2004-09-21 13:50:11) will be changed to 
            <code>1093989600000</code> (2004-09-01 00:00:00) when using
            <code>Resolution.MONTH</code>.
            
            </summary>
            <param name="time">The time in milliseconds (not ticks).</param>
            <param name="resolution">The desired resolution of the date to be returned
            </param>
            <returns> the date with all values more precise than <code>resolution</code>
            set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT
            </returns>
        </member>
        <member name="T:Raven.Abstractions.Linq.DateTools.Resolution">
            <summary>Specifies the time granularity. </summary>
        </member>
        <member name="F:Raven.Abstractions.Linq.DateTools.Resolution.YEAR">
            <summary>
            Resolution by year
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Linq.DateTools.Resolution.MONTH">
            <summary>
            Resolution by month
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Linq.DateTools.Resolution.DAY">
            <summary>
            Resolution by day
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Linq.DateTools.Resolution.HOUR">
            <summary>
            Resolution by hour
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Linq.DateTools.Resolution.MINUTE">
            <summary>
            Resolution by minute
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Linq.DateTools.Resolution.SECOND">
            <summary>
            Resolution by second
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Linq.DateTools.Resolution.MILLISECOND">
            <summary>
            Resolution by millisecond
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Linq.DateTools.Resolution.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Raven.Abstractions.Linq.IDynamicJsonObject.Inner">
            <summary>
            Gets the inner json object
            </summary>
            <value>The inner.</value>
        </member>
        <member name="T:Raven.Abstractions.Linq.DynamicJsonObject">
            <summary>
            A dynamic implementation on top of <see cref="T:Raven.Json.Linq.RavenJObject"/>
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="other">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.#ctor(Raven.Json.Linq.RavenJObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Linq.DynamicJsonObject"/> class.
            </summary>
            <param name="inner">The obj.</param>
        </member>
        <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for indexing operations.
            </summary>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.GetValue(System.String)">
            <summary>
            Gets the value for the specified name
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.GetDocumentId">
            <summary>
            Gets the document id.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Abstractions.Linq.DynamicJsonObject.Raven#Abstractions#Linq#IDynamicJsonObject#Inner">
            <summary>
            Gets the inner json object
            </summary>
            <value>The inner.</value>
        </member>
        <member name="P:Raven.Abstractions.Linq.DynamicList.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Raven.Abstractions.Data.QueryResult">
            <summary>
            The result of a query
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.QueryResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Data.QueryResult"/> class.
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.QueryResult.EnsureSnapshot">
            <summary>
            Ensures that the query results can be used in snapshots
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.QueryResult.CreateSnapshot">
            <summary>
            Creates a snapshot of the query results
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.Results">
            <summary>
            Gets or sets the document resulting from this query.
            </summary>
            <value>The results.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.Includes">
            <summary>
            Gets or sets the document included in the result.
            </summary>
            <value>The includes.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.IsStale">
            <summary>
            Gets or sets a value indicating whether the index is stale.
            </summary>
            <value><c>true</c> if the index is stale; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.IndexTimestamp">
            <summary>
            The last time the index was updated.
            This can be used to determine the freshness of the data.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.TotalResults">
            <summary>
            Gets or sets the total results for this query
            </summary>
            <value>The total results.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.SkippedResults">
            <summary>
            Gets or sets the skipped results (duplicate documents);
            </summary>
            <value>The skipped results.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.IndexName">
            <summary>
            The index used to answer this query
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.IndexEtag">
            <summary>
            The last etag indexed by the index.
            This can be used to determine whatever the results can be cached.
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Indexing.SortOptions">
            <summary>
            The sort options to use for a particular field
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.None">
            <summary>
            No sort options
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.String">
            <summary>Sort using term values as Strings.  Sort values are String and lower
            values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.Int">
            <summary>Sort using term values as encoded Integers.  Sort values are Integer and
            lower values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.Float">
            <summary>Sort using term values as encoded Floats.  Sort values are Float and
            lower values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.Long">
            <summary>Sort using term values as encoded Longs.  Sort values are Long and
            lower values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.Double">
            <summary>Sort using term values as encoded Doubles.  Sort values are Double and
            lower values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.Short">
            <summary>Sort using term values as encoded Shorts.  Sort values are Short and
            lower values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.Custom">
            <summary>Sort using a custom Comparator.  Sort values are any Comparable and
            sorting is done according to natural order. 
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.Byte">
            <summary>Sort using term values as encoded Bytes.  Sort values are Byte and
            lower values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.StringVal">
            <summary>Sort using term values as Strings, but comparing by
            value (using String.compareTo) for all comparisons.
            This is typically slower than {@link #STRING}, which
            uses ordinals to do the sorting. 
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Replication.ReplicationDestination">
            <summary>
            Data class for replication destination documents
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Replication.ReplicationDestination.ConnectionStringName">
            <summary>
            The name of the connection string specified in the 
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Replication.ReplicationDestination.Url">
            <summary>
            Gets or sets the URL of the replication destination
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:Raven.Abstractions.Replication.ReplicationDestination.TransitiveReplicationBehavior">
            <summary>
            How should the replication bundle behave with respect to replicated documents.
            If a document was replicated to us from another node, should we replicate that to
            this destination, or should we replicate only documents that were locally modified.
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Replication.TransitiveReplicationOptions">
            <summary>
            Options for how to replicate replicated documents
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Replication.TransitiveReplicationOptions.None">
            <summary>
            Don't replicate replicated documents
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Replication.TransitiveReplicationOptions.Replicate">
            <summary>
            Replicate replicated documents
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Replication.ReplicationDocument">
            <summary>
            This class represent the list of replication destinations for the server
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Replication.ReplicationDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Replication.ReplicationDocument"/> class.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Replication.ReplicationDocument.Destinations">
            <summary>
            Gets or sets the list of replication destinations.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Replication.ReplicationDocument.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="T:Raven.Client.Connection.JsonExtensions">
            <summary>
            Extension to json objects
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.JsonExtensions.Deserialize``1(Raven.Json.Linq.RavenJObject,Raven.Client.Document.DocumentConvention)">
            <summary>
            Deserializes the specified instance <param name="self"/> to an instance of <typeparam name="T"/> using the specified <param name="convention"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.JsonExtensions.Deserialize(Raven.Json.Linq.RavenJObject,System.Type,Raven.Client.Document.DocumentConvention)">
            <summary>
            Deserializes the specified instance <param name="self"/> to an instance of <param name="type"/> using the specified <param name="convention"/>
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.JsonLuceneDateTimeConverter">
            <summary>
            Convert a lucene data format to and from json values
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.JsonLuceneDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Client.Connection.JsonLuceneDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Client.Connection.JsonLuceneDateTimeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Raven.Client.Connection.JsonLuceneDateTimeConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Raven.Client.Connection.RavenQuery">
            <summary>
            Helper class that provide a way to escape query terms
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.RavenQuery.Escape(System.String)">
            <summary>
            Escapes Lucene operators and quotes phrases
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.RavenQuery.Escape(System.String,System.Boolean)">
            <summary>
            Escapes Lucene operators and quotes phrases
            </summary>
            <param name="term"></param>
            <param name="allowWildcards"></param>
            <returns>escaped term</returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Escaping%20Special%20Characters
            </remarks>
        </member>
        <member name="T:Raven.Client.Connection.SerializationHelper">
            <summary>
             Helper method to do serialization from RavenJObject to JsonDocument
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.RavenJObjectsToJsonDocuments(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJObject})">
            <summary>
             Translate a collection of RavenJObject to JsonDocuments
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.ToJsonDocuments(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJObject})">
            <summary>
             Translate a collection of RavenJObject to JsonDocuments
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.ToJsonDocument(Raven.Json.Linq.RavenJObject)">
            <summary>
             Translate a collection of RavenJObject to JsonDocuments
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.ToQueryResult(Raven.Json.Linq.RavenJObject,System.String)">
            <summary>
            Translate a result for a query
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.DeserializeJsonDocument(System.String,Raven.Json.Linq.RavenJToken,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}},System.Net.HttpStatusCode)">
            <summary>
            Deserialize a request to a JsonDocument
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.DeserializeJsonDocumentMetadata(System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}},System.Net.HttpStatusCode)">
            <summary>
            Deserialize a request to a JsonDocument
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.WebRequestEventArgs">
            <summary>
            Event arguments for the event of creating a <see cref="T:System.Net.WebRequest"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.WebRequestEventArgs.Request">
            <summary>
            Gets or sets the web request.
            </summary>
            <value>The request.</value>
        </member>
        <member name="P:Raven.Client.Connection.WebRequestEventArgs.JsonRequest">
            <summary>
            The RavenDB json request
            </summary>
        </member>
        <member name="T:Raven.Client.Converters.GuidConverter">
            <summary>
            Convert strings from / to guids
            </summary>
        </member>
        <member name="T:Raven.Client.Converters.ITypeConverter">
            <summary>
            Interface for performing type conversions.
            We couldn't use the built-in TypeConverter because it is too big an interface for people to build on.
            </summary>
        </member>
        <member name="M:Raven.Client.Converters.ITypeConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
        </member>
        <member name="M:Raven.Client.Converters.ITypeConverter.ConvertFrom(System.String,System.Object,System.Boolean)">
            <summary>
            Converts the given object to the type of this converter.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="tag">The tag prefix to use</param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="allowNull">Whatever null is a valid value</param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.ITypeConverter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="M:Raven.Client.Converters.GuidConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
        </member>
        <member name="M:Raven.Client.Converters.GuidConverter.ConvertFrom(System.String,System.Object,System.Boolean)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.GuidConverter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="T:Raven.Client.Converters.Int32Converter">
            <summary>
            Convert strings from / to int32
            </summary>
        </member>
        <member name="M:Raven.Client.Converters.Int32Converter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. 
                            </param>
        </member>
        <member name="M:Raven.Client.Converters.Int32Converter.ConvertFrom(System.String,System.Object,System.Boolean)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.Int32Converter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="T:Raven.Client.Converters.Int64Converter">
            <summary>
            Convert strings from / to int64
            </summary>
        </member>
        <member name="M:Raven.Client.Converters.Int64Converter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. 
                            </param>
        </member>
        <member name="M:Raven.Client.Converters.Int64Converter.ConvertFrom(System.String,System.Object,System.Boolean)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.Int64Converter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="T:Raven.Client.Document.Async.AsyncDocumentSession">
            <summary>
            Implementation for async document session 
            </summary>
        </member>
        <member name="T:Raven.Client.Document.InMemoryDocumentSessionOperations">
            <summary>
            Abstract implementation for in memory session operations
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.deletedEntities">
            <summary>
            The entities waiting to be deleted
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.entitiesAndMetadata">
            <summary>
            hold the data required to manage the data for RavenDB's Unit of Work
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.entitiesByKey">
            <summary>
            Translate between a key and its associated entity
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.listeners">
            <summary>
            all the listeners for this session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.#ctor(Raven.Client.Document.DocumentStore,Raven.Client.Document.DocumentSessionListeners,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.InMemoryDocumentSessionOperations"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetEtagFor``1(``0)">
            <summary>
            Gets the ETag for the specified entity.
            If the entity is transient, it will load the etag from the store
            and associate the current state of the entity with the etag from the server.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetMetadataFor``1(``0)">
            <summary>
            Gets the metadata for the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetJsonDocument(System.String)">
            <summary>
            Get the json document by key from the store
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.IsLoaded(System.String)">
            <summary>
            Returns whatever a document with the specified id is loaded in the 
            current session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetDocumentId(System.Object)">
            <summary>
            Gets the document id.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.HasChanged(System.Object)">
            <summary>
            Determines whether the specified entity has changed.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity has changed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity``1(Raven.Abstractions.Data.JsonDocument)">
            <summary>
            Tracks the entity inside the unit of work
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documentFound">The document found.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity``1(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Tracks the entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Delete``1(``0)">
            <summary>
            Marks the specified entity for deletion. The entity will be deleted when SaveChanges is called.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.ConvertToEntity``1(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Converts the json document to an entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The id.</param>
            <param name="documentFound">The document found.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrySetIdentity``1(``0,System.String)">
            <summary>
            Tries to set the identity property
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object)">
            <summary>
            Stores the specified entity in the session. The entity will be saved when SaveChanges is called.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object,System.Guid)">
            <summary>
            Stores the specified entity in the session. The entity will be saved when SaveChanges is called.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object,System.String)">
            <summary>
            Stores the specified entity in the session, explicitly specifying its Id. The entity will be saved when SaveChanges is called.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object,System.Guid,System.String)">
            <summary>
            Stores the specified entity in the session, explicitly specifying its Id. The entity will be saved when SaveChanges is called.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetOrGenerateDocumentKey(System.Object)">
            <summary>
            Tries to get the identity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TryGetIdFromInstance(System.Object,System.String@)">
            <summary>
            Attempts to get the document key from an instance 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.CreatePutEntityCommand(System.Object,Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata)">
            <summary>
            Creates the put entity command.
            </summary>
            <param name="entity">The entity.</param>
            <param name="documentMetadata">The document metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.UpdateBatchResults(System.Collections.Generic.IList{Raven.Abstractions.Data.BatchResult},Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData)">
            <summary>
            Updates the batch results.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.PrepareForSaveChanges">
            <summary>
            Prepares for save changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.EntityChanged(System.Object,Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata)">
            <summary>
            Determines if the entity have changed.
            </summary>
            <param name="entity">The entity.</param>
            <param name="documentMetadata">The document metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.EntitiesToJsonCachingScope">
            <summary>
            All calls to convert an entity to a json object would be cache
            This is used inside the SaveChanges() action, where we need to access the entities json
            in several disparate places.
            
            Note: This assumes that no modifications can happen during the SaveChanges. This is naturally true
            Note: for SaveChanges (and multi threaded access will cause undefined behavior anyway).
            Note: For SaveChangesAsync, the same holds true as well.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Evict``1(``0)">
            <summary>
            Evicts the specified entity from the session.
            Remove the entity from the delete queue and stops tracking changes for this entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Clear">
            <summary>
            Clears this instance.
            Remove all entities from the delete queue and stops tracking changes for all entities.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Defer(Raven.Abstractions.Commands.ICommandData[])">
            <summary>
            Defer commands to be executed on SaveChanges()
            </summary>
            <param name="commands">The commands to be executed</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Commit(System.Guid)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Rollback(System.Guid)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.PromoteTransaction(System.Guid)">
            <summary>
            Promotes the transaction.
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.Id">
            <summary>
            The session id 
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentStore">
            <summary>
             The document store associated with this session
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NumberOfRequests">
            <summary>
            Gets the number of requests for this session
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritativeInformationTimeout">
            <summary>
            Gets or sets the timeout to wait for authoritative information if encountered non authoritative document.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.StoreIdentifier">
            <summary>
            Gets the store identifier for this session.
            The store identifier is the identifier for the particular RavenDB instance.
            This is mostly useful when using sharding.
            </summary>
            <value>The store identifier.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.Conventions">
            <summary>
            Gets the conventions used by this session
            </summary>
            <value>The conventions.</value>
            <remarks>
            This instance is shared among all sessions, changes to the <see cref="T:Raven.Client.Document.DocumentConvention"/> should be done
            via the <see cref="T:Raven.Client.IDocumentStore"/> instance, not on a single session.
            </remarks>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.ResourceManagerId">
            <summary>
            The transaction resource manager identifier
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the max number of requests per session.
            If the <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NumberOfRequests"/> rise above <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.MaxNumberOfRequestsPerSession"/>, an exception will be thrown.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.UseOptimisticConcurrency">
            <summary>
            Gets or sets a value indicating whether the session should use optimistic concurrency.
            When set to <c>true</c>, a check is made so that a change made behind the session back would fail
            and raise <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.HasChanges">
            <summary>
            Gets a value indicating whether any of the entities tracked by the session has changes.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.AllowNonAuthoritativeInformation">
            <summary>
            Gets or sets a value indicating whether non authoritative information is allowed.
            Non authoritative information is document that has been modified by a transaction that hasn't been committed.
            The server provides the latest committed version, but it is known that attempting to write to a non authoritative document
            will fail, because it is already modified.
            If set to <c>false</c>, the session will wait <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritativeInformationTimeout"/> for the transaction to commit to get an
            authoritative information. If the wait is longer than <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritativeInformationTimeout"/>, <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> is thrown.
            </summary>
            <value>
            	<c>true</c> if non authoritative information is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata">
            <summary>
            Metadata held about an entity by the session
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.OriginalValue">
            <summary>
            Gets or sets the original value.
            </summary>
            <value>The original value.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.ETag">
            <summary>
            Gets or sets the ETag.
            </summary>
            <value>The ETag.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.OriginalMetadata">
            <summary>
            Gets or sets the original metadata.
            </summary>
            <value>The original metadata.</value>
        </member>
        <member name="T:Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData">
            <summary>
            Data for a batch command to the server
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData.Commands">
            <summary>
            Gets or sets the commands.
            </summary>
            <value>The commands.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData.Entities">
            <summary>
            Gets or sets the entities.
            </summary>
            <value>The entities.</value>
        </member>
        <member name="T:Raven.Client.IAsyncDocumentSession">
            <summary>
            Interface for document session using async approaches
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Store(System.Object,System.Guid)">
            <summary>
            Stores the specified entity with the specified etag.
            The entity will be saved when <see cref="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync"/> is called.
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Store(System.Object)">
            <summary>
            Stores the specified entity in the session. The entity will be saved when <see cref="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync"/> is called.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Delete``1(``0)">
            <summary>
            Marks the specified entity for deletion. The entity will be deleted when <see cref="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync"/> is called.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.String)">
            <summary>
            Begins the async load operation
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.String[])">
            <summary>
            Begins the async multi load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync">
            <summary>
            Begins the async save changes operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Query``1(System.String)">
            <summary>
            Queries the specified index using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <param name="indexName">Name of the index.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Query``1">
            <summary>
            Dynamically queries RavenDB using LINQ
            </summary>
            <typeparam name="T">The result of the query</typeparam>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Query``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.IAsyncDocumentSession.Advanced">
            <summary>
            Get the accessor for advanced operations
            </summary>
            <remarks>
            Those operations are rarely needed, and have been moved to a separate 
            property to avoid cluttering the API
            </remarks>
        </member>
        <member name="T:Raven.Client.IAsyncAdvancedSessionOperations">
            <summary>
            Advanced async session operations
            </summary>
        </member>
        <member name="T:Raven.Client.IAdvancedDocumentSessionOperations">
            <summary>
            Advanced session operations
            </summary>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.IsLoaded(System.String)">
            <summary>
            Returns whatever a document with the specified id is loaded in the 
            current session
            </summary>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.Evict``1(``0)">
            <summary>
            Evicts the specified entity from the session.
            Remove the entity from the delete queue and stops tracking changes for this entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.Clear">
            <summary>
            Clears this instance.
            Remove all entities from the delete queue and stops tracking changes for all entities.
            </summary>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.GetMetadataFor``1(``0)">
            <summary>
            Gets the metadata for the specified entity.
            If the entity is transient, it will load the metadata from the store
            and associate the current state of the entity with the metadata from the server.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.GetEtagFor``1(``0)">
            <summary>
            Gets the ETag for the specified entity.
            If the entity is transient, it will load the etag from the store
            and associate the current state of the entity with the etag from the server.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.GetDocumentId(System.Object)">
            <summary>
            Gets the document id for the specified entity.
            </summary>
            <remarks>
            This function may return <c>null</c> if the entity isn't tracked by the session, or if the entity is 
            a new entity with a key that should be generated on the server. 
            </remarks>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.HasChanged(System.Object)">
            <summary>
            Determines whether the specified entity has changed.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity has changed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.Defer(Raven.Abstractions.Commands.ICommandData[])">
            <summary>
            Defer commands to be executed on SaveChanges()
            </summary>
            <param name="commands">The commands to be executed</param>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.DocumentStore">
            <summary>
            The document store associated with this session
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.StoreIdentifier">
            <summary>
            Gets the store identifier for this session.
            The store identifier is the identifier for the particular RavenDB instance. 
            This is mostly useful when using sharding.
            </summary>
            <value>The store identifier.</value>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.UseOptimisticConcurrency">
            <summary>
            Gets or sets a value indicating whether the session should use optimistic concurrency.
            When set to <c>true</c>, a check is made so that a change made behind the session back would fail
            and raise <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException"/>.
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.AllowNonAuthoritativeInformation">
            <summary>
            Gets or sets a value indicating whether non authoritative information is allowed.
            Non authoritative information is document that has been modified by a transaction that hasn't been committed.
            The server provides the latest committed version, but it is known that attempting to write to a non authoritative document
            will fail, because it is already modified.
            If set to <c>false</c>, the session will wait <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.NonAuthoritativeInformationTimeout"/> for the transaction to commit to get an
            authoritative information. If the wait is longer than <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.NonAuthoritativeInformationTimeout"/>, <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> is thrown.
            </summary>
            <value>
            	<c>true</c> if non authoritative information is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.NonAuthoritativeInformationTimeout">
            <summary>
            Gets or sets the timeout to wait for authoritative information if encountered non authoritative document.
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the max number of requests per session.
            If the <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.NumberOfRequests"/> rise above <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.MaxNumberOfRequestsPerSession"/>, an exception will be thrown.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.NumberOfRequests">
            <summary>
            Gets the number of requests for this session
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.HasChanges">
            <summary>
            Gets a value indicating whether any of the entities tracked by the session has changes.
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.AsyncLuceneQuery``1(System.String)">
            <summary>
            Query the specified index using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.AsyncLuceneQuery``1">
            <summary>
            Dynamically query RavenDB using Lucene syntax
            </summary>
        </member>
        <member name="P:Raven.Client.IAsyncAdvancedSessionOperations.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="T:Raven.Client.Linq.IDocumentQueryGenerator">
            <summary>
             Generate a new document query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IDocumentQueryGenerator.Query``1(System.String)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IDocumentQueryGenerator.AsyncQuery``1(System.String)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.IDocumentQueryGenerator.Conventions">
            <summary>
            Gets the conventions asosciated with this query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.#ctor(Raven.Client.Document.DocumentStore,Raven.Client.Connection.Async.IAsyncDatabaseCommands,Raven.Client.Document.DocumentSessionListeners,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.Async.AsyncDocumentSession"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncLuceneQuery``1(System.String)">
            <summary>
            Query the specified index using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncLuceneQuery``1">
            <summary>
            Dynamically query RavenDB using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.String)">
            <summary>
            Begins the async load operation
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.String[])">
            <summary>
            Begins the async multi load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsyncInternal``1(System.String[],System.String[])">
            <summary>
            Begins the async multi load operation
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.SaveChangesAsync">
            <summary>
            Begins the async save changes operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.GetJsonDocument(System.String)">
            <summary>
            Get the json document by key from the store
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Commit(System.Guid)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Rollback(System.Guid)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.PromoteTransaction(System.Guid)">
            <summary>
            Promotes the transaction.
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Query``1">
            <summary>
            Dynamically queries RavenDB using LINQ
            </summary>
            <typeparam name="T">The result of the query</typeparam>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Raven#Client#Linq#IDocumentQueryGenerator#Query``1(System.String)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncQuery``1(System.String)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Document.Async.AsyncDocumentSession.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="P:Raven.Client.Document.Async.AsyncDocumentSession.Advanced">
            <summary>
            Get the accessor for advanced operations
            </summary>
            <remarks>
            Those operations are rarely needed, and have been moved to a separate 
            property to avoid cluttering the API
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.DefaultRavenContractResolver">
            <summary>
            The default json contract will serialize all properties and all public fields
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DefaultRavenContractResolver.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DefaultRavenContractResolver"/> class.
            </summary>
            <param name="shareCache">If set to <c>true</c> the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> instances with the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.</param>
        </member>
        <member name="M:Raven.Client.Document.DefaultRavenContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="T:Raven.Client.Document.DocumentConvention">
            <summary>
            The set of conventions used by the <see cref="T:Raven.Client.Document.DocumentStore"/> which allow the users to customize
            the way the Raven client API behaves
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentConvention"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.DefaultFindFullDocumentKeyFromNonStringIdentifier(System.Object,System.Type,System.Boolean)">
            <summary>
             Find the full document name assuming that we are using the standard conventions
             for generating a document key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GenerateDocumentKeyUsingIdentity(Raven.Client.Document.DocumentConvention,System.Object)">
            <summary>
            Generates the document key using identity.
            </summary>
            <param name="conventions">The conventions.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.DefaultTypeTagName(System.Type)">
            <summary>
            Get the default tag name for the specified type.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetTypeTagName(System.Type)">
            <summary>
            Gets the name of the type tag.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GenerateDocumentKey(System.Object)">
            <summary>
            Generates the document key.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetIdentityProperty(System.Type)">
            <summary>
            Gets the identity property.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.CreateSerializer">
            <summary>
            Creates the serializer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetClrType(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Get the CLR type (if exists) from the document
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetClrTypeName(System.Type)">
            <summary>
             Get the CLR type name to be stored in the entity metadata
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FailoverBehavior">
            <summary>
            How should we behave in a replicated environment when we can't 
            reach the primary node and need to failover to secondary node(s).
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.CustomizeJsonSerializer">
            <summary>
            Register an action to customize the json serializer used by the <see cref="T:Raven.Client.Document.DocumentStore"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.DisableProfiling">
            <summary>
            Disable all profiling support
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.IdentityTypeConvertors">
            <summary>
             A list of type converters that can be used to translate the document key (string)
             to whatever type it is that is used on the entity, if the type isn't already a string
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.IdentityPartsSeparator">
            <summary>
            Gets or sets the identity parts separator used by the hilo generators
            </summary>
            <value>The identity parts separator.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the default max number of requests per session.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.DefaultQueryingConsistency">
            <summary>
            The consistency options used when querying the database by default
            Note that this option impact only queries, since we have Strong Consistency model for the documents
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindClrType">
            <summary>
            Gets or sets the function to find the clr type of a document.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindClrTypeName">
            <summary>
            Gets or sets the function to find the clr type name from a clr type
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindFullDocumentKeyFromNonStringIdentifier">
            <summary>
            Gets or sets the function to find the full document key based on the type of a document
            and the value type identifier (just the numeric part of the id).
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.JsonContractResolver">
            <summary>
            Gets or sets the json contract resolver.
            </summary>
            <value>The json contract resolver.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindTypeTagName">
            <summary>
            Gets or sets the function to find the type tag.
            </summary>
            <value>The name of the find type tag.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindPropertyNameForIndex">
            <summary>
            Gets or sets the function to find the indexed property name
            given the indexed document type, the index name, the current path and the property path.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindPropertyNameForDynamicIndex">
            <summary>
            Gets or sets the function to find the indexed property name
            given the indexed document type, the index name, the current path and the property path.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.ShouldCacheRequest">
            <summary>
            Whatever or not RavenDB should cache the request to the specified url.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindIdentityProperty">
            <summary>
            Gets or sets the function to find the identity property.
            </summary>
            <value>The find identity property.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindIdentityPropertyNameFromEntityName">
            <summary>
            Get or sets the function to get the identity property name from the entity name
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.DocumentKeyGenerator">
            <summary>
            Gets or sets the document key generator.
            </summary>
            <value>The document key generator.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.UseParallelMultiGet">
            <summary>
            Instruct RavenDB to parallel Multi Get processing 
            when handling lazy requests
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.HandleUnauthorizedResponse">
            <summary>
            Handles unauthenticate responses, usually by authenticating against the oauth server
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.HandleUnauthorizedResponseAsync">
            <summary>
            Begins handling of unauthenticate responses, usually by authenticating against the oauth server
            in async manner
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindIdValuePartForValueTypeConversion">
            <summary>
            When RavenDB needs to convert between a string id to a value type like int or guid, it calls
            this to perform the actual work
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.SaveEnumsAsIntegers">
            <summary>
            Saves Enums as integers and instruct the Linq provider to query enums as integer values.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.TransformTypeTagNameToDocumentKeyPrefix">
            <summary>
            Translate the type tag name to the document key prefix
            </summary>
        </member>
        <member name="T:Raven.Client.Document.ConsistencyOptions">
            <summary>
            The consistency options for all queries, fore more details about the consistency options, see:
            http://www.allthingsdistributed.com/2008/12/eventually_consistent.html
            
            Note that this option impact only queries, since we have Strong Consistency model for the documents
            </summary>
        </member>
        <member name="F:Raven.Client.Document.ConsistencyOptions.MonotonicRead">
            <summary>
            Ensures that after querying an index at time T, you will never see the results
            of the index at a time prior to T.
            This is ensured by the server, and require no action from the client
            </summary>
        </member>
        <member name="F:Raven.Client.Document.ConsistencyOptions.QueryYourWrites">
            <summary>
             After updating a documents, will only accept queries which already indexed the updated value.
            </summary>
        </member>
        <member name="T:Raven.Client.Document.DocumentStore">
            <summary>
            Manages access to RavenDB and open sessions to work with RavenDB.
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentStore">
            <summary>
            Interface for managing access to RavenDB and open sessions.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStore.AggressivelyCacheFor(System.TimeSpan)">
            <summary>
            Setup the context for aggressive caching.
            </summary>
            <param name="cahceDuration">Specify the aggressive cache duration</param>
            <remarks>
            Aggressive caching means that we will not check the server to see whatever the response
            we provide is current or not, but will serve the information directly from the local cache
            without touching the server.
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentStore.DisableAggressiveCaching">
            <summary>
            Setup the context for no aggressive caching
            </summary>
            <remarks>
            This is mainly useful for internal use inside RavenDB, when we are executing
            queries that has been marked with WaitForNonStaleResults, we temporarily disable
            aggressive caching.
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentStore.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.OpenAsyncSession">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.OpenAsyncSession(System.String)">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.GetLastWrittenEtag">
            <summary>
             Gets the etag of the last document written by any session belonging to this 
             document store
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentStore.SharedOperationsHeaders">
            <summary>
            Gets the shared operations headers.
            </summary>
            <value>The shared operations headers.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.JsonRequestFactory">
            <summary>
            Get the <see cref="T:Raven.Client.Silverlight.Connection.HttpJsonRequestFactory"/> for this store
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentStore.Identifier">
            <summary>
            Gets or sets the identifier for this store.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.Conventions">
            <summary>
            Gets the conventions.
            </summary>
            <value>The conventions.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.Url">
            <summary>
            Gets the URL.
            </summary>
        </member>
        <member name="F:Raven.Client.Document.DocumentStore.currentSessionId">
            <summary>
            The current session id - only used during contsruction
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentStore"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.RegisterListener(Raven.Client.Listeners.IDocumentStoreListener)">
            <summary>
            Registers the store listener.
            </summary>
            <param name="documentStoreListener">The document store listener.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.GetProfilingInformationFor(System.Guid)">
            <summary>
             Get the profiling information for the given id
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.AssertValidConfiguration">
            <summary>
            validate the configuration for the document store
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.InitializeInternal">
            <summary>
            Initialize the document store access method to RavenDB
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.RegisterListener(Raven.Client.Listeners.IDocumentDeleteListener)">
            <summary>
            Registers the delete listener.
            </summary>
            <param name="deleteListener">The delete listener.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.RegisterListener(Raven.Client.Listeners.IDocumentQueryListener)">
            <summary>
            Registers the query listener.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.RegisterListener(Raven.Client.Listeners.IDocumentConversionListener)">
            <summary>
            Registers the convertion listener.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.DisableAggressiveCaching">
            <summary>
            Setup the context for no aggressive caching
            </summary>
            <remarks>
            This is mainly useful for internal use inside RavenDB, when we are executing
            queries that have been marked with WaitForNonStaleResults, we temporarily disable
            aggressive caching.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.AggressivelyCacheFor(System.TimeSpan)">
            <summary>
            Setup the context for aggressive caching.
            </summary>
            <param name="cacheDuration">Specify the aggressive cache duration</param>
            <remarks>
            Aggressive caching means that we will not check the server to see whatever the response
            we provide is current or not, but will serve the information directly from the local cache
            without touching the server.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.OpenAsyncSession">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.OpenAsyncSession(System.String)">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.GetLastWrittenEtag">
            <summary>
             Gets the etag of the last document written by any session belonging to this 
             document store
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.SharedOperationsHeaders">
            <summary>
            Gets the shared operations headers.
            </summary>
            <value>The shared operations headers.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.JsonRequestFactory">
            <summary>
             Get the <see cref="T:Raven.Client.Silverlight.Connection.HttpJsonRequestFactory"/> for the stores
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.Credentials">
            <summary>
            Gets or sets the credentials.
            </summary>
            <value>The credentials.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.Identifier">
            <summary>
            Gets or sets the identifier for this store.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.ApiKey">
            <summary>
            The API Key to use when authenticating against a RavenDB server that
            supports API Key authentication
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.Url">
            <summary>
            Gets or sets the URL.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.DefaultDatabase">
            <summary>
            Gets or sets the default database name.
            </summary>
            <value>The default database name.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.Conventions">
            <summary>
            Gets the conventions.
            </summary>
            <value>The conventions.</value>
        </member>
        <member name="E:Raven.Client.Document.DocumentStore.SessionCreatedInternal">
            <summary>
             Internal notification for integaration tools, mainly
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.ResourceManagerId">
            <summary>
            The resource manager id for the document store.
            IMPORTANT: Using Guid.NewGuid() to set this value is almost certainly a mistake, you should set
            it to a value that remains consistent between restart of the system.
            </summary>
        </member>
        <member name="E:Raven.Client.Document.DocumentStore.AfterDispose">
            <summary>
            Called after dispose is completed
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.WasDisposed">
            <summary>
            Whatever the instance has been disposed
            </summary>
        </member>
        <member name="T:Raven.Client.Document.HiLoKeyGenerator">
            <summary>
            Generate hilo numbers against a RavenDB document
            </summary>
        </member>
        <member name="M:Raven.Client.Document.HiLoKeyGenerator.#ctor(Raven.Client.IDocumentStore,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.HiLoKeyGenerator"/> class.
            </summary>
            <param name="documentStore">The document store.</param>
            <param name="tag">The tag.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Raven.Client.Document.HiLoKeyGenerator.GenerateDocumentKey(Raven.Client.Document.DocumentConvention,System.Object)">
            <summary>
            Generates the document key.
            </summary>
            <param name="convention">The convention.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.HiLoKeyGenerator.NextId">
            <summary>
             Create the next id (numeric)
            </summary>
        </member>
        <member name="T:Raven.Client.Document.MultiTypeHiLoKeyGenerator">
            <summary>
            Generate a hilo key for each given type
            </summary>
        </member>
        <member name="M:Raven.Client.Document.MultiTypeHiLoKeyGenerator.#ctor(Raven.Client.IDocumentStore,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.MultiTypeHiLoKeyGenerator"/> class.
            </summary>
            <param name="documentStore">The document store.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiTypeHiLoKeyGenerator.GenerateDocumentKey(Raven.Client.Document.DocumentConvention,System.Object)">
            <summary>
            Generates the document key.
            </summary>
            <param name="conventions">The conventions.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Document.ReflectionUtil">
            <summary>
            Helper class for reflection operations
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ReflectionUtil.GetFullNameWithoutVersionInformation(System.Type)">
            <summary>
            Gets the full name without version information.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.EntityStored">
            <summary>
            Delegate definition when an entity is stored in the session
            </summary>
        </member>
        <member name="T:Raven.Client.EntityToDocument">
            <summary>
            Delegate definition for converting an entity to a document and metadata
            </summary>
        </member>
        <member name="T:Raven.Client.DocumentToEntity">
            <summary>
            Delegate definition for converting a document and metadata to an entity
            </summary>
        </member>
        <member name="T:Raven.Client.Exceptions.ConflictException">
            <summary>
            This exception occurs when a (replication) conflict is encountered.
            Usually this required a user to manually resolve the conflict.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="P:Raven.Client.Exceptions.ConflictException.ConflictedVersionIds">
            <summary>
            Gets or sets the conflicted version ids.
            </summary>
            <value>The conflicted version ids.</value>
        </member>
        <member name="T:Raven.Client.Exceptions.NonAuthoritativeInformationException">
            <summary>
            This exception is raised when a non authoritative information is encountered
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritativeInformationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritativeInformationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritativeInformationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Raven.Client.Exceptions.NonUniqueObjectException">
            <summary>
            This exception is thrown when a separate instance of an entity is added to the session
            when a different entity with the same key already exists within the session.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Raven.Client.Exceptions.ReadVetoException">
            <summary>
            This exception is raised whenever a trigger vetoes the read by the session
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Raven.Client.Extensions.MultiTenancyExtensions">
            <summary>
             Extension methods to create mutli tenants databases
            </summary>
        </member>
        <member name="M:Raven.Client.Extensions.MultiTenancyExtensions.EnsureDatabaseExistsAsync(Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,System.Boolean)">
            <summary>
             Ensures that the database exists, creating it if needed
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentQuery`1">
            <summary>
            A query against a Raven index
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.Lazily">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.Lazily(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed.
            Also provide a function to execute when the value is evaluated
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractIndexCreationTask`1">
            <summary>
            Base class for creating indexes
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractIndexCreationTask`2">
            <summary>
            Base class for creating indexes
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask`2.CreateIndexDefinition">
            <summary>
            Creates the index definition.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask`2.Map">
            <summary>
            The map definition
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.ExpressionOperatorPrecedence">
            <summary>
            Precedence values for operations
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Primary">
            <summary>
            x.y  f(x)  a[x]  x++  x--  new
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Unary">
            <summary>
            +  -  !  ~  ++x  --x  (T)x
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Multiplicative">
            <summary>
            *  /  %
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Additive">
            <summary>
            +  -
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Shift">
            <summary>
            &lt;&lt; &gt;&gt;
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.RelationalAndTypeTesting">
            <summary>
            &lt;  &gt;  &lt;=  &gt;=  is  as
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Equality">
            <summary>
            ==  !=
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalAND">
            <summary>
            &amp;
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalXOR">
            <summary>
            ^
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalOR">
            <summary>
            |
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ConditionalAND">
            <summary>
            &amp;&amp; (AndAlso in VB)
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ConditionalOR">
            <summary>
            ||
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.NullCoalescing">
            <summary>
            ??
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Conditional">
            <summary>
            ?:
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Assignment">
            <summary>
            =  *=  /=  %=  +=  -=  &lt;&lt;=  &gt;&gt;=  &amp;=  ^=  |=
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ParenthesisNotNeeded">
            <summary>
            pseudo operator for comparisons
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.ExpressionOperatorPrecedenceExtension">
            <summary>
            Methods on the enum
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionOperatorPrecedenceExtension.NeedsParenthesisFor(Raven.Client.Indexes.ExpressionOperatorPrecedence,Raven.Client.Indexes.ExpressionOperatorPrecedence)">
            <summary>
            Needs parenthesis for the expression
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.ExpressionStringBuilder">
            <summary>
              Based off of System.Linq.Expressions.ExpressionStringBuilder
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.ExpressionToString(Raven.Client.Document.DocumentConvention,System.Boolean,System.Type,System.String,System.Linq.Expressions.Expression)">
            <summary>
              Convert the expression to a string
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.BinaryExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitBlock(System.Linq.Expressions.BlockExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.BlockExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.CatchBlock" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.ConditionalExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
              Visits the <see cref = "T:System.Linq.Expressions.ConstantExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
            <summary>
              Visits the <see cref = "T:System.Linq.Expressions.DebugInfoExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitDefault(System.Linq.Expressions.DefaultExpression)">
            <summary>
              Visits the <see cref = "T:System.Linq.Expressions.DefaultExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.DynamicExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
              Visits the element init.
            </summary>
            <param name = "initializer">The initializer.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
              Visits the children of the extension expression.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitGoto(System.Linq.Expressions.GotoExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.GotoExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitIndex(System.Linq.Expressions.IndexExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.IndexExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.InvocationExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitLabel(System.Linq.Expressions.LabelExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.LabelExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
              Visits the lambda.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.ListInitExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitLoop(System.Linq.Expressions.LoopExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.LoopExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.MemberExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
              Visits the member assignment.
            </summary>
            <param name = "assignment">The assignment.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.MemberInitExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
              Visits the member list binding.
            </summary>
            <param name = "binding">The binding.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
              Visits the member member binding.
            </summary>
            <param name = "binding">The binding.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.MethodCallExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.NewExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.NewArrayExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
              Visits the <see cref = "T:System.Linq.Expressions.ParameterExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.RuntimeVariablesExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.SwitchExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.SwitchCase" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitTry(System.Linq.Expressions.TryExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.TryExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.TypeBinaryExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.UnaryExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="T:Raven.Client.Indexes.IClientSideDatabase">
            <summary>
            DatabaseAccessor for loading documents in the translator
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IClientSideDatabase.Load``1(System.String)">
            <summary>
            Loading a document during result transformers
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IClientSideDatabase.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loading a document during result transformers
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.IndexCreation">
            <summary>
            Helper class for creating indexes from implementations of <see cref="T:Raven.Client.Indexes.AbstractIndexCreationTask"/>.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexesAsync(System.Reflection.Assembly,Raven.Client.IDocumentStore)">
            <summary>
            Creates the indexes found in the specified assembly.
            </summary>
            <param name="assemblyToScanForIndexingTasks">The assembly to scan for indexing tasks.</param>
            <param name="documentStore">The document store.</param>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexesAsync(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.IDocumentStore)">
            <summary>
            Creates the indexes found in the specified catalog
            </summary>
            <param name="catalogToGetnIndexingTasksFrom">The catalog to getn indexing tasks from.</param>
            <param name="documentStore">The document store.</param>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexesAsync(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.Connection.Async.IAsyncDatabaseCommands,Raven.Client.Document.DocumentConvention)">
            <summary>
            Creates the indexes found in the specified catalog
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.SpatialIndex">
            <summary>
            Accessor for generating spatial queries on the client side
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.SpatialIndex.Generate(System.Double,System.Double)">
            <summary>
            Marker method for allowing generating spatial indexes on the client
            </summary>
        </member>
        <member name="T:Raven.Client.ITransactionalDocumentSession">
            <summary>
            Implementors of this interface provide transactional operations
            Note that this interface is mostly useful only for expert usage
            </summary>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.Commit(System.Guid)">
            <summary>
            Commits the transaction specified.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.Rollback(System.Guid)">
            <summary>
            Rollbacks the transaction specified.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.PromoteTransaction(System.Guid)">
            <summary>
            Promotes a transaction specified to a distributed transaction
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns>The token representing the distributed transaction</returns>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.StoreRecoveryInformation(System.Guid,System.Guid,System.Byte[])">
            <summary>
            Stores the recovery information for the specified transaction
            </summary>
            <param name="resourceManagerId">The resource manager Id for this transaction</param>
            <param name="txId">The tx id.</param>
            <param name="recoveryInformation">The recovery information.</param>
        </member>
        <member name="P:Raven.Client.ITransactionalDocumentSession.ResourceManagerId">
            <summary>
            The transaction resource manager identifier
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.DynamicQueryProviderProcessor`1">
            <summary>
            A specialized query provider processor for querying dynamic types
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryProviderProcessor`1">
            <summary>
            Process a Linq expression to a Lucene query
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.queryGenerator">
            <summary>
            The query generator
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.indexName">
            <summary>
            The index name
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.#ctor(Raven.Client.Linq.IDocumentQueryGenerator,System.Action{Raven.Client.IDocumentQueryCustomization},System.Action{Raven.Abstractions.Data.QueryResult},System.String,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryProviderProcessor`1"/> class.
            </summary>
            <param name="queryGenerator">The document query generator.</param>
            <param name="customizeQuery">The customize query.</param>
            <param name="afterQueryExecuted">Executed after the query run, allow access to the query results</param>
            <param name="indexName">The name of the index the query is executed against.</param>
            <param name="fieldsToFetch">The fields to fetch in this query</param>
            <param name="fieldsTRename">The fields to rename for the results of this query</param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.VisitExpression(System.Linq.Expressions.Expression)">
            <summary>
            Visits the expression and generate the lucene query
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            Gets member info for the specified expression and the path to that expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetPath(System.Linq.Expressions.Expression,System.String@,System.Type@,System.Boolean@)">
            <summary>
            Get the path from the expression, including considering dictionary calls
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetMemberExpression(System.Linq.Expressions.Expression)">
            <summary>
            Get the member expression from the expression
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetValueFromExpression(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Get the actual value from the expression
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetLuceneQueryFor(System.Linq.Expressions.Expression)">
            <summary>
            Gets the lucene query.
            </summary>
            <value>The lucene query.</value>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetAsyncLuceneQueryFor(System.Linq.Expressions.Expression)">
            <summary>
            Gets the lucene query.
            </summary>
            <value>The lucene query.</value>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProviderProcessor`1.CurrentPath">
            <summary>
            Gets the current path in the case of expressions within collections
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProviderProcessor`1.FieldsToFetch">
            <summary>
            Gets or sets the fields to fetch.
            </summary>
            <value>The fields to fetch.</value>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProviderProcessor`1.FieldsToRename">
            <summary>
            Rename the fields from one name to another
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType">
            <summary>
            Different query types 
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.All">
            <summary>
            
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.Any">
            <summary>
            
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.Count">
            <summary>
            Get count of items for the query
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.First">
            <summary>
            Get only the first item
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.FirstOrDefault">
            <summary>
            Get only the first item (or null)
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.Single">
            <summary>
            Get only the first item (or throw if there are more than one)
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.SingleOrDefault">
            <summary>
            Get only the first item (or throw if there are more than one) or null if empty
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DynamicQueryProviderProcessor`1.#ctor(Raven.Client.Linq.IDocumentQueryGenerator,System.Action{Raven.Client.IDocumentQueryCustomization},System.Action{Raven.Abstractions.Data.QueryResult},System.String,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a dynamic query provider around the provided session
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DynamicQueryProviderProcessor`1.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            Gets member info for the specified expression and the path to that expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Linq.DynamicRavenQueryInspector`1">
            <summary>
            A specialized queryable object for querying dynamic indexes
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryInspector`1">
            <summary>
            Implements <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.IRavenQueryable`1">
            <summary>
            An implementation of <see cref="T:System.Linq.IOrderedQueryable`1"/> with Raven specific operation
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryable`1.Statistics(Raven.Client.Linq.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryable`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.#ctor(Raven.Client.Linq.IRavenQueryProvider,Raven.Client.Linq.RavenQueryStatistics,System.String,System.Linq.Expressions.Expression,Raven.Client.Connection.Async.IAsyncDatabaseCommands)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryInspector`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.Statistics(Raven.Client.Linq.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.GetLastEqualityTerm">
            <summary>
             Get the last equality term for the query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.ToList``1">
            <summary>
              This function exists solely to forbid calling ToList() on a queryable in Silverlight.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.ToArray``1">
            <summary>
              This function exists solely to forbid calling ToList() on a queryable in Silverlight.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.FieldsToFetch(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set the fields to fetch
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryInspector`1.IndexQueried">
            <summary>
            Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryInspector`1.AsyncDatabaseCommands">
            <summary>
            Grant access to the async database commands
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryInspector`1.#ctor(Raven.Client.Linq.IRavenQueryProvider,Raven.Client.Linq.RavenQueryStatistics,System.String,System.Linq.Expressions.Expression,Raven.Client.Connection.Async.IAsyncDatabaseCommands)">
            <summary>
            Creates a dynamic raven queryable around the provided query provider
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.DynamicRavenQueryProvider`1">
            <summary>
            This is a specialized query provider for querying dynamic indexes
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Raven.Client.Linq.IRavenQueryProvider">
            <summary>
            Extension for the built-in <see cref="T:System.Linq.IQueryProvider"/> allowing for Raven specific operations
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
            <summary>
            Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.For``1">
            <summary>
            Change the result type for the query provider
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.ToAsyncLuceneQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the Linq query to a Lucene query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.Lazily``1(System.Linq.Expressions.Expression,System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Convert the Linq query to a lazy Lucene query and provide a function to execute when it is being evaluate
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.MoveAfterQueryExecuted``1(Raven.Client.IAsyncDocumentQuery{``0})">
            <summary>
            Move the registered after query actions
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.IndexName">
            <summary>
            Gets the name of the index.
            </summary>
            <value>The name of the index.</value>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.QueryGenerator">
            <summary>
            Get the query generator
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.FieldsToFetch">
            <summary>
            Set the fields to fetch
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryProvider`1.#ctor(Raven.Client.Linq.IDocumentQueryGenerator,System.String,Raven.Client.Linq.RavenQueryStatistics,Raven.Client.Connection.Async.IAsyncDatabaseCommands)">
            <summary>
            Creates a dynamic query provider around the provided document session
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryProvider`1.For``1">
            <summary>
            Change the result type for the query provider
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryProvider`1.ToLuceneQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the expression to a Lucene query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryProvider`1.MoveAfterQueryExecuted``1(Raven.Client.IAsyncDocumentQuery{``0})">
            <summary>
            Move the registered after query actions
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryProvider`1.ToAsyncLuceneQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the expression to a Lucene query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryProvider`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryProvider`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the specified expression.
            </summary>
            <typeparam name="S"></typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryProvider`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryProvider`1.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
            <summary>
            Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryProvider`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="P:Raven.Client.Linq.DynamicRavenQueryProvider`1.IndexName">
            <summary>
            Gets the IndexName for this dynamic query provider
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.DynamicRavenQueryProvider`1.QueryGenerator">
            <summary>
            Get the query generator
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.DynamicRavenQueryProvider`1.CustomizedQuery">
            <summary>
            Gets the actions for customizing the generated lucene query
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.DynamicRavenQueryProvider`1.FieldsToFetch">
            <summary>
            Set the fields to fetch
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.DynamicRavenQueryProvider`1.FieldsToRename">
            <summary>
            Set the fields to rename
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.ExpressionInfo">
            <summary>
            This class represents a node in an expression, usually a member - but in the case of dynamic queries the path to a member
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.ExpressionInfo.#ctor(System.String,System.Type,System.Boolean)">
            <summary>
            Creates an ExpressionMemberInfo
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.ExpressionInfo.Path">
            <summary>
            Gets the full path of the member being referred to by this node
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.ExpressionInfo.Type">
            <summary>
            Gets the actual type being referred to
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.ExpressionInfo.IsNestedPath">
            <summary>
            Whatever the expression is of a nested path
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryProvider`1">
            <summary>
            An implementation of <see cref="T:Raven.Client.Linq.IRavenQueryProvider"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.For``1">
            <summary>
            Change the result type for the query provider
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.#ctor(Raven.Client.Linq.IDocumentQueryGenerator,System.String,Raven.Client.Linq.RavenQueryStatistics,Raven.Client.Connection.Async.IAsyncDatabaseCommands)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryProvider`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the specified expression.
            </summary>
            <typeparam name="S"></typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
            <summary>
            Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.MoveAfterQueryExecuted``1(Raven.Client.IAsyncDocumentQuery{``0})">
            <summary>
            Move the registered after query actions
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.ToAsyncLuceneQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the expression to a Lucene query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.Lazily``1(System.Linq.Expressions.Expression,System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.CustomizedQuery">
            <summary>
            Gets the actions for customizing the generated lucene query
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.IndexName">
            <summary>
            Gets the name of the index.
            </summary>
            <value>The name of the index.</value>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.QueryGenerator">
            <summary>
            Get the query generator
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.FieldsToFetch">
            <summary>
            Set the fields to fetch
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.FieldsToRename">
            <summary>
            Set the fields to rename
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryStatistics">
            <summary>
            Statistics about a raven query.
            Such as how many records match the query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryStatistics.UpdateQueryStats(Raven.Abstractions.Data.QueryResult)">
            <summary>
            Update the query stats from the query results
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryStatistics.IsStale">
            <summary>
            Whatever the query returned potentially stale results
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryStatistics.TotalResults">
            <summary>
            What was the total count of the results that matched the query
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryStatistics.SkippedResults">
            <summary>
            Gets or sets the skipped results (duplicate documents);
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryStatistics.Timestamp">
            <summary>
            The time when the query results were unstale.
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryStatistics.IndexName">
            <summary>
            The name of the index queried
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryStatistics.IndexTimestamp">
            <summary>
            The timestamp of the queried index
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryStatistics.IndexEtag">
            <summary>
            The etag of the queried index
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.Shards">
            <summary>
            Holds a list of shards
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.Shards.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Shard.Shards"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.Shards.#ctor(System.Collections.Generic.IEnumerable{Raven.Client.IDocumentStore})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Shard.Shards"/> class.
            </summary>
            <param name="shards">The shards.</param>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.ShardResolution.AllShardsResolutionStrategy">
            <summary>
            Shard resolution strategy that select all the shards
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.ShardResolution.IShardResolutionStrategy">
            <summary>
            Implementors of this interface provide a way to decide which shards will be queried
            for a specified operation
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardResolution.IShardResolutionStrategy.SelectShardIds(Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData)">
            <summary>
            Selects the shard ids appropriate for the specified data
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardResolution.AllShardsResolutionStrategy.SelectShardIds(Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData)">
            <summary>
            Selects the shard ids appropriate for the given data
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData">
            <summary>
            Information required to resolve the appropriate shard for an entity / entity and key
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData.BuildFrom(System.Type)">
            <summary>
            Builds an instance of <see cref="T:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData"/> from the given type
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData.BuildFrom(System.Type,System.String)">
            <summary>
            Builds an instance of <see cref="T:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData"/> from the given type
            and key
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>The type of the entity.</value>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.ShardSelection.IShardSelectionStrategy">
            <summary>
            Implementors of this interface provide a way to go from an exists/new
            entity to the appropriate shard for the entity
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardSelection.IShardSelectionStrategy.ShardIdForNewObject(System.Object)">
            <summary>
            Find the shard id for a new object.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardSelection.IShardSelectionStrategy.ShardIdForExistingObject(System.Object)">
            <summary>
            Find the shard id for existing object.
            </summary>
        </member>
        <member name="T:Raven.Client.StoredEntityEventArgs">
            <summary>
            The event arguments raised when an entity is stored
            </summary>
        </member>
        <member name="P:Raven.Client.StoredEntityEventArgs.SessionIdentifier">
            <summary>
            Gets or sets the session identifier.
            </summary>
            <value>The session identifier.</value>
        </member>
        <member name="P:Raven.Client.StoredEntityEventArgs.EntityInstance">
            <summary>
            Gets or sets the entity instance.
            </summary>
            <value>The entity instance.</value>
        </member>
        <member name="T:Raven.Client.Util.Inflector">
            <summary>
            The Inflector class transforms words from one 
            form to another. For example, from singular to plural.
            </summary>
        </member>
        <member name="M:Raven.Client.Util.Inflector.Pluralize(System.String)">
            <summary>
            Return the plural of a word.
            </summary>
            <param name="word">The singular form</param>
            <returns>The plural form of <paramref name="word"/></returns>
        </member>
        <member name="M:Raven.Client.Util.Inflector.Singularize(System.String)">
            <summary>
            Return the singular of a word.
            </summary>
            <param name="word">The plural form</param>
            <returns>The singular form of <paramref name="word"/></returns>
        </member>
        <member name="M:Raven.Client.Util.Inflector.Capitalize(System.String)">
            <summary>
            Capitalizes a word.
            </summary>
            <param name="word">The word to be capitalized.</param>
            <returns><paramref name="word"/> capitalized.</returns>
        </member>
        <member name="T:Raven.Client.Util.ObjectReferenceEqualityComparerer`1">
            <summary>
            A generic object comparerer that would only use object's reference, 
            ignoring any <see cref="T:System.IEquatable`1"/> or <see cref="M:System.Object.Equals(System.Object)"/>  overrides.
            </summary>
        </member>
        <member name="F:Raven.Client.Util.ObjectReferenceEqualityComparerer`1.Default">
            <summary>
            The default ObjectReferenceEqualityComparerer instance
            </summary>
        </member>
        <member name="M:Raven.Client.Util.ObjectReferenceEqualityComparerer`1.Equals(`0,`0)">
            <summary>
            When overridden in a derived class, determines whether two objects of type <typeparamref name="T"/> are equal.
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param>
        </member>
        <member name="M:Raven.Client.Util.ObjectReferenceEqualityComparerer`1.GetHashCode(`0)">
            <summary>
            When overridden in a derived class, serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The object for which to get a hash code.</param><exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
    </members>
</doc>
